{"ast":null,"code":"var _jsxFileName = \"/home/allan/Projects/Trybe-Projects/sd-013-b-project-trivia-react-redux/src/Pages/GamePage.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport md5 from 'crypto-js/md5';\nimport Header from '../components/Header';\nimport Helps from '../components/Helps';\nimport playAction, { getQuestionsThunk } from '../Redux/Action';\nimport './gamepage.css';\nimport Loading from './Loading';\n\nclass GamePage extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      index: 0,\n      questionIsAnswered: false,\n      timer: 30\n    };\n    this.handleClick = this.handleClick.bind(this);\n    this.questionMod = this.questionMod.bind(this);\n    this.questionAnswered = this.questionAnswered.bind(this);\n    this.handleChronometer = this.handleChronometer.bind(this);\n    this.nextButtonClick = this.nextButtonClick.bind(this);\n    this.nextButton = this.nextButton.bind(this);\n    this.incorrectAnswers = this.incorrectAnswers.bind(this);\n    this.correctAnswer = this.correctAnswer.bind(this);\n  }\n\n  componentDidMount() {\n    const _this$props = this.props,\n          sendQuestionsToState = _this$props.sendQuestionsToState,\n          token = _this$props.token;\n    sendQuestionsToState(token);\n  }\n\n  handleClick() {\n    const questionDifficulties = {\n      easy: 1,\n      medium: 2,\n      hard: 3\n    };\n    const INITIAL_SCORE = 10;\n    let _this$props2 = this.props,\n        score = _this$props2.playerScore,\n        assertions = _this$props2.playerAssertions;\n    const _this$props3 = this.props,\n          updateScore = _this$props3.updateScore,\n          questions = _this$props3.questions;\n    const _this$state = this.state,\n          index = _this$state.index,\n          timer = _this$state.timer;\n    const currentDifficulty = questions[index].difficulty;\n    assertions += 1;\n    score += INITIAL_SCORE + timer * questionDifficulties[currentDifficulty];\n    updateScore({\n      assertions,\n      score\n    });\n  }\n\n  handleChronometer() {\n    const timer = this.state.timer;\n    const questionIsAnswered = this.state.questionIsAnswered;\n    const INTERVAL = 1000;\n    const ONE_SECOND = 1;\n\n    if (timer > 0 && !questionIsAnswered) {\n      setTimeout(() => {\n        const time = timer - ONE_SECOND;\n        this.setState({\n          timer: time\n        });\n      }, INTERVAL);\n    }\n  }\n\n  questionAnswered() {\n    this.setState({\n      questionIsAnswered: true\n    });\n  }\n\n  incorrectAnswers() {\n    const _this$state2 = this.state,\n          index = _this$state2.index,\n          questionIsAnswered = _this$state2.questionIsAnswered;\n    const questions = this.props.questions;\n    const currentQuestion = questions[index];\n    const incorrectAnswers = currentQuestion.incorrect_answers;\n    return incorrectAnswers.map((answer, mapIndex) => React.createElement(\"button\", {\n      key: mapIndex,\n      type: \"button\",\n      \"data-testid\": `wrong-answer-${mapIndex}`,\n      onClick: this.questionAnswered,\n      className: questionIsAnswered ? 'incorrect-color' : 'answer',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: \"answer-field\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, answer))));\n  }\n\n  correctAnswer() {\n    const _this$state3 = this.state,\n          index = _this$state3.index,\n          timer = _this$state3.timer,\n          questionIsAnswered = _this$state3.questionIsAnswered;\n    const questions = this.props.questions;\n    const currentQuestion = questions[index];\n    return React.createElement(\"button\", {\n      type: \"button\",\n      className: questionIsAnswered ? 'correct-color' : 'answer',\n      \"data-testid\": \"correct-answer\",\n      onClick: () => {\n        this.questionAnswered();\n        this.handleClick();\n      },\n      disabled: !timer || questionIsAnswered,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: \"answer-field\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, currentQuestion.correct_answer)));\n  }\n\n  nextButtonClick() {\n    const _this$state4 = this.state,\n          index = _this$state4.index,\n          questionIsAnswered = _this$state4.questionIsAnswered;\n    const _this$props4 = this.props,\n          playerName = _this$props4.playerName,\n          playerScore = _this$props4.playerScore,\n          playerEmail = _this$props4.playerEmail;\n    const history = this.props.history;\n    const MAX_INDEX = 4;\n    const imgPath = 'https://www.gravatar.com/avatar/$ce11fce876c93ed5d2a72da660496473';\n    const hash = md5(playerEmail).toString();\n    const image = `${imgPath}${hash}`;\n\n    if (index < MAX_INDEX) {\n      this.setState({\n        index: index + 1,\n        questionIsAnswered: !questionIsAnswered\n      });\n    } else {\n      let rank = JSON.parse(localStorage.getItem('ranking'));\n      const player = {\n        name: playerName,\n        picture: image,\n        score: playerScore\n      };\n      rank.push(player);\n      rank = JSON.stringify(rank);\n      localStorage.setItem('ranking', rank);\n      history.push('/feedback');\n    }\n  }\n\n  nextButton() {\n    return React.createElement(\"button\", {\n      type: \"button\",\n      className: \"next-button\",\n      \"data-testid\": \"btn-next\",\n      onClick: this.nextButtonClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }, \"Pr\\xF3xima\");\n  }\n\n  questionMod() {\n    const _this$state5 = this.state,\n          index = _this$state5.index,\n          questionIsAnswered = _this$state5.questionIsAnswered;\n    const questions = this.props.questions;\n    const currentQuestion = questions[index];\n    return React.createElement(\"div\", {\n      className: \"main-gamepage-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"question-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: \"question\",\n      \"data-testid\": \"question-text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    }, \"Question:\", currentQuestion.question), React.createElement(\"span\", {\n      className: \"category\",\n      \"data-testid\": \"question-category\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166\n      },\n      __self: this\n    }, \"Category:\", currentQuestion.category)), React.createElement(\"div\", {\n      className: \"row-contents\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"answers-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"answer-items\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173\n      },\n      __self: this\n    }, this.incorrectAnswers(), this.correctAnswer())), React.createElement(\"div\", {\n      className: \"helps\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178\n      },\n      __self: this\n    }, React.createElement(Helps, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179\n      },\n      __self: this\n    }))), React.createElement(\"div\", {\n      className: \"button-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182\n      },\n      __self: this\n    }, questionIsAnswered && this.nextButton()));\n  }\n\n  returnImage() {\n    const playerEmail = this.props.playerEmail;\n    const imgPath = 'https://www.gravatar.com/avatar/$ce11fce876c93ed5d2a72da660496473';\n    const hash = md5(playerEmail).toString();\n    const image = `${imgPath}${hash}`;\n    return image;\n  }\n\n  render() {\n    const _this$props5 = this.props,\n          questions = _this$props5.questions,\n          playerScore = _this$props5.playerScore,\n          playerName = _this$props5.playerName,\n          playerEmail = _this$props5.playerEmail;\n    const timer = this.state.timer;\n    if (!questions.length) return React.createElement(Loading, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200\n      },\n      __self: this\n    });\n    this.handleChronometer();\n    return React.createElement(\"div\", {\n      className: \"wrapper\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203\n      },\n      __self: this\n    }, React.createElement(Header, {\n      playerScore: playerScore,\n      timer: timer,\n      image: this.returnImage(),\n      playerName: playerName,\n      playerEmail: playerEmail,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204\n      },\n      __self: this\n    }), this.questionMod());\n  }\n\n}\n\nGamePage.propTypes = {\n  history: PropTypes.shape({\n    push: PropTypes.func.isRequired\n  }).isRequired,\n  playerAssertions: PropTypes.number.isRequired,\n  playerEmail: PropTypes.string.isRequired,\n  playerName: PropTypes.string.isRequired,\n  playerScore: PropTypes.number.isRequired,\n  questions: PropTypes.shape({\n    length: PropTypes.number.isRequired\n  }).isRequired,\n  sendQuestionsToState: PropTypes.func.isRequired,\n  token: PropTypes.string.isRequired,\n  updateScore: PropTypes.func.isRequired\n};\n\nconst mapStateToProps = state => ({\n  playerScore: state.player.score,\n  playerAssertions: state.player.assertions,\n  playerName: state.player.name,\n  playerEmail: state.player.gravatarEmail,\n  token: state.token,\n  questions: state.questions\n});\n\nconst mapDispatchToProps = dispatch => ({\n  sendQuestionsToState: token => dispatch(getQuestionsThunk(token)),\n  updateScore: payload => dispatch(playAction(payload))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(GamePage);","map":{"version":3,"sources":["/home/allan/Projects/Trybe-Projects/sd-013-b-project-trivia-react-redux/src/Pages/GamePage.js"],"names":["React","PropTypes","connect","md5","Header","Helps","playAction","getQuestionsThunk","Loading","GamePage","Component","constructor","props","state","index","questionIsAnswered","timer","handleClick","bind","questionMod","questionAnswered","handleChronometer","nextButtonClick","nextButton","incorrectAnswers","correctAnswer","componentDidMount","sendQuestionsToState","token","questionDifficulties","easy","medium","hard","INITIAL_SCORE","score","playerScore","assertions","playerAssertions","updateScore","questions","currentDifficulty","difficulty","INTERVAL","ONE_SECOND","setTimeout","time","setState","currentQuestion","incorrect_answers","map","answer","mapIndex","correct_answer","playerName","playerEmail","history","MAX_INDEX","imgPath","hash","toString","image","rank","JSON","parse","localStorage","getItem","player","name","picture","push","stringify","setItem","question","category","returnImage","render","length","propTypes","shape","func","isRequired","number","string","mapStateToProps","gravatarEmail","mapDispatchToProps","dispatch","payload"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport md5 from 'crypto-js/md5';\nimport Header from '../components/Header';\nimport Helps from '../components/Helps';\nimport playAction, { getQuestionsThunk } from '../Redux/Action';\nimport './gamepage.css';\nimport Loading from './Loading';\n\nclass GamePage extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      index: 0,\n      questionIsAnswered: false,\n      timer: 30,\n    };\n    this.handleClick = this.handleClick.bind(this);\n    this.questionMod = this.questionMod.bind(this);\n    this.questionAnswered = this.questionAnswered.bind(this);\n    this.handleChronometer = this.handleChronometer.bind(this);\n    this.nextButtonClick = this.nextButtonClick.bind(this);\n    this.nextButton = this.nextButton.bind(this);\n    this.incorrectAnswers = this.incorrectAnswers.bind(this);\n    this.correctAnswer = this.correctAnswer.bind(this);\n  }\n\n  componentDidMount() {\n    const { sendQuestionsToState, token } = this.props;\n    sendQuestionsToState(token);\n  }\n\n  handleClick() {\n    const questionDifficulties = {\n      easy: 1,\n      medium: 2,\n      hard: 3,\n    };\n    const INITIAL_SCORE = 10;\n    let { playerScore: score, playerAssertions: assertions } = this.props;\n    const { updateScore, questions } = this.props;\n    const { index, timer } = this.state;\n    const currentDifficulty = questions[index].difficulty;\n    assertions += 1;\n    score += INITIAL_SCORE + (timer * questionDifficulties[currentDifficulty]);\n    updateScore({ assertions, score });\n  }\n\n  handleChronometer() {\n    const { timer } = this.state;\n    const { questionIsAnswered } = this.state;\n    const INTERVAL = 1000;\n    const ONE_SECOND = 1;\n    if (timer > 0 && !questionIsAnswered) {\n      setTimeout(() => {\n        const time = timer - ONE_SECOND;\n        this.setState({\n          timer: time,\n        });\n      }, INTERVAL);\n    }\n  }\n\n  questionAnswered() {\n    this.setState({\n      questionIsAnswered: true,\n    });\n  }\n\n  incorrectAnswers() {\n    const { index, questionIsAnswered } = this.state;\n    const { questions } = this.props;\n    const currentQuestion = questions[index];\n    const incorrectAnswers = currentQuestion.incorrect_answers;\n    return (\n      incorrectAnswers.map((answer, mapIndex) => (\n        <button\n          key={ mapIndex }\n          type=\"button\"\n          data-testid={ `wrong-answer-${mapIndex}` }\n          onClick={ this.questionAnswered }\n          className={ questionIsAnswered ? 'incorrect-color' : 'answer' }\n        >\n          <span className=\"answer-field\"><p>{ answer }</p></span>\n        </button>\n      ))\n    );\n  }\n\n  correctAnswer() {\n    const { index, timer, questionIsAnswered } = this.state;\n    const { questions } = this.props;\n    const currentQuestion = questions[index];\n    return (\n      <button\n        type=\"button\"\n        className={ questionIsAnswered ? 'correct-color' : 'answer' }\n        data-testid=\"correct-answer\"\n        onClick={ () => {\n          this.questionAnswered();\n          this.handleClick();\n        } }\n        disabled={ !timer || questionIsAnswered }\n      >\n        <span className=\"answer-field\">\n          <p>\n            {currentQuestion.correct_answer}\n          </p>\n        </span>\n      </button>\n    );\n  }\n\n  nextButtonClick() {\n    const { index, questionIsAnswered } = this.state;\n    const { playerName, playerScore, playerEmail } = this.props;\n    const { history } = this.props;\n    const MAX_INDEX = 4;\n    const imgPath = 'https://www.gravatar.com/avatar/$ce11fce876c93ed5d2a72da660496473';\n    const hash = md5(playerEmail).toString();\n    const image = `${imgPath}${hash}`;\n    if (index < MAX_INDEX) {\n      this.setState({\n        index: index + 1,\n        questionIsAnswered: !questionIsAnswered,\n      });\n    } else {\n      let rank = JSON.parse(localStorage.getItem('ranking'));\n      const player = {\n        name: playerName,\n        picture: image,\n        score: playerScore,\n      };\n      rank.push(player);\n      rank = JSON.stringify(rank);\n      localStorage.setItem('ranking', rank);\n      history.push('/feedback');\n    }\n  }\n\n  nextButton() {\n    return (\n      <button\n        type=\"button\"\n        className=\"next-button\"\n        data-testid=\"btn-next\"\n        onClick={ this.nextButtonClick }\n      >\n        Próxima\n      </button>\n    );\n  }\n\n  questionMod() {\n    const { index, questionIsAnswered } = this.state;\n    const { questions } = this.props;\n    const currentQuestion = questions[index];\n    return (\n      <div className=\"main-gamepage-container\">\n        <div className=\"question-container\">\n          <span className=\"question\" data-testid=\"question-text\">\n            Question:\n            { currentQuestion.question }\n          </span>\n          <span className=\"category\" data-testid=\"question-category\">\n            Category:\n            { currentQuestion.category }\n          </span>\n        </div>\n        <div className=\"row-contents\">\n          <div className=\"answers-container\">\n            <div className=\"answer-items\">\n              { this.incorrectAnswers() }\n              { this.correctAnswer() }\n            </div>\n          </div>\n          <div className=\"helps\">\n            <Helps />\n          </div>\n        </div>\n        <div className=\"button-container\">\n          { questionIsAnswered && this.nextButton() }\n        </div>\n      </div>\n    );\n  }\n\n  returnImage() {\n    const { playerEmail } = this.props;\n    const imgPath = 'https://www.gravatar.com/avatar/$ce11fce876c93ed5d2a72da660496473';\n    const hash = md5(playerEmail).toString();\n    const image = `${imgPath}${hash}`;\n    return image;\n  }\n\n  render() {\n    const { questions, playerScore, playerName, playerEmail } = this.props;\n    const { timer } = this.state;\n    if (!questions.length) return <Loading />;\n    this.handleChronometer();\n    return (\n      <div className=\"wrapper\">\n        <Header\n          playerScore={ playerScore }\n          timer={ timer }\n          image={ this.returnImage() }\n          playerName={ playerName }\n          playerEmail={ playerEmail }\n        />\n        { this.questionMod() }\n      </div>\n    );\n  }\n}\n\nGamePage.propTypes = {\n  history: PropTypes.shape({\n    push: PropTypes.func.isRequired,\n  }).isRequired,\n  playerAssertions: PropTypes.number.isRequired,\n  playerEmail: PropTypes.string.isRequired,\n  playerName: PropTypes.string.isRequired,\n  playerScore: PropTypes.number.isRequired,\n  questions: PropTypes.shape({\n    length: PropTypes.number.isRequired,\n  }).isRequired,\n  sendQuestionsToState: PropTypes.func.isRequired,\n  token: PropTypes.string.isRequired,\n  updateScore: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  playerScore: state.player.score,\n  playerAssertions: state.player.assertions,\n  playerName: state.player.name,\n  playerEmail: state.player.gravatarEmail,\n  token: state.token,\n  questions: state.questions,\n});\nconst mapDispatchToProps = (dispatch) => ({\n  sendQuestionsToState: (token) => dispatch(getQuestionsThunk(token)),\n  updateScore: (payload) => dispatch(playAction(payload)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(GamePage);\n"]},"metadata":{},"sourceType":"module"}