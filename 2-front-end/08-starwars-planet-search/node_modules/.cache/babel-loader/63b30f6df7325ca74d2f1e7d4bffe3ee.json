{"ast":null,"code":"var _jsxFileName = \"/home/allan/Projects/Trybe-Projects/sd-013-b-project-starwars-planets-search/src/Pages/PlanetsTable.jsx\";\nimport React, { useContext } from 'react';\nimport PlanetsContext from '../Context/PlanetsContext';\nimport { compareCases, sortPlanetsColumns } from './Utils/CompareCases';\nexport default function PlanetsTable() {\n  let {\n    planetsList\n  } = useContext(PlanetsContext);\n  const {\n    filter: {\n      filterByName,\n      filterByNumericValues\n    },\n    order\n  } = useContext(PlanetsContext);\n\n  if (filterByName !== '') {\n    planetsList = planetsList.filter(planet => planet.name.includes(filterByName));\n  }\n\n  if (filterByNumericValues.length > 0) {\n    filterByNumericValues.forEach(specs => {\n      planetsList = planetsList.filter(planet => {\n        const planetValue = Number(planet[specs.column]);\n        const filterValue = Number(specs.value);\n        return compareCases(specs.comparison, filterValue, planetValue);\n      });\n    });\n  }\n\n  planetsList = sortPlanetsColumns(order, planetsList);\n  return /*#__PURE__*/React.createElement(\"table\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 9\n    }\n  }, \"Planets\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 9\n    }\n  }, \"Rotation Period\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }\n  }, \"Orbital Period\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }\n  }, \"Diameter\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }\n  }, \"Climate\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 9\n    }\n  }, \"Gravity\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }\n  }, \"Terrain\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }\n  }, \"Surface Water\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }\n  }, \"Population\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }\n  }, \"Films\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }\n  }, \"Created\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }\n  }, \"Edited\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }\n  }, \"URL\")), planetsList.map(planet => /*#__PURE__*/React.createElement(\"tr\", {\n    key: planet.name,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"td\", {\n    \"data-testid\": \"planet-name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 11\n    }\n  }, planet.name), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 11\n    }\n  }, planet.rotation_period), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 11\n    }\n  }, planet.orbital_period), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 11\n    }\n  }, planet.diameter), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 11\n    }\n  }, planet.climate), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 11\n    }\n  }, planet.gravity), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 11\n    }\n  }, planet.terrain), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 11\n    }\n  }, planet.surface_water), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 11\n    }\n  }, planet.population), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 11\n    }\n  }, planet.films.map(film => /*#__PURE__*/React.createElement(\"p\", {\n    key: planet.name,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 41\n    }\n  }, film))), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 11\n    }\n  }, planet.created), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 11\n    }\n  }, planet.edited), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 11\n    }\n  }, planet.url))));\n}","map":{"version":3,"sources":["/home/allan/Projects/Trybe-Projects/sd-013-b-project-starwars-planets-search/src/Pages/PlanetsTable.jsx"],"names":["React","useContext","PlanetsContext","compareCases","sortPlanetsColumns","PlanetsTable","planetsList","filter","filterByName","filterByNumericValues","order","planet","name","includes","length","forEach","specs","planetValue","Number","column","filterValue","value","comparison","map","rotation_period","orbital_period","diameter","climate","gravity","terrain","surface_water","population","films","film","created","edited","url"],"mappings":"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","sourcesContent":["import React, { useContext } from 'react';\nimport PlanetsContext from '../Context/PlanetsContext';\nimport { compareCases, sortPlanetsColumns } from './Utils/CompareCases';\n\nexport default function PlanetsTable() {\n  let { planetsList } = useContext(PlanetsContext);\n\n  const { filter: {\n    filterByName, filterByNumericValues }, order } = useContext(PlanetsContext);\n\n  if (filterByName !== '') {\n    planetsList = planetsList.filter((planet) => planet.name.includes(filterByName));\n  }\n  if (filterByNumericValues.length > 0) {\n    filterByNumericValues.forEach((specs) => {\n      planetsList = planetsList.filter(\n        (planet) => {\n          const planetValue = Number(planet[specs.column]);\n          const filterValue = Number(specs.value);\n          return compareCases(specs.comparison, filterValue, planetValue);\n        },\n      );\n    });\n  }\n\n  planetsList = sortPlanetsColumns(order, planetsList);\n\n  return (\n    <table>\n      <tr>\n        <th>Planets</th>\n        <th>Rotation Period</th>\n        <th>Orbital Period</th>\n        <th>Diameter</th>\n        <th>Climate</th>\n        <th>Gravity</th>\n        <th>Terrain</th>\n        <th>Surface Water</th>\n        <th>Population</th>\n        <th>Films</th>\n        <th>Created</th>\n        <th>Edited</th>\n        <th>URL</th>\n      </tr>\n      {planetsList.map((planet) => (\n        <tr key={ planet.name }>\n          <td data-testid=\"planet-name\">{planet.name}</td>\n          <td>{planet.rotation_period}</td>\n          <td>{planet.orbital_period}</td>\n          <td>{planet.diameter}</td>\n          <td>{planet.climate}</td>\n          <td>{planet.gravity}</td>\n          <td>{planet.terrain}</td>\n          <td>{planet.surface_water}</td>\n          <td>{planet.population}</td>\n          <td>\n            {planet.films.map((film) => <p key={ planet.name }>{film}</p>)}\n          </td>\n          <td>{planet.created}</td>\n          <td>{planet.edited}</td>\n          <td>{planet.url}</td>\n        </tr>\n      ))}\n    </table>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}