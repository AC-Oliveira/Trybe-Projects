{"ast":null,"code":"var _jsxFileName = \"/home/allan/Projects/Trybe-Projects/sd-013-b-project-starwars-planets-search/src/Pages/PlanetsColumnFilter.jsx\";\nimport React, { useContext } from 'react';\nimport PlanetsContext from '../Context/PlanetsContext';\nexport default function PlanetsColumnFilter() {\n  const globalState = useContext(PlanetsContext);\n  const {\n    setGlobalState,\n    filter\n  } = useContext(PlanetsContext);\n  const test = filter.filterByNumericValues;\n  const newOrder = {\n    column: 'name',\n    sort: 'ASC'\n  };\n  const options = {\n    population: 'population',\n    orbital_period: 'orbital_period',\n    diameter: 'diameter',\n    rotation_period: 'rotation_period',\n    surface_water: 'surface_water'\n  };\n  filter.filterByNumericValues.forEach(specs => delete options[specs.column]);\n  const optionsToMap = Object.keys(options);\n  const columnsCompare = ['maior que', 'igual a', 'menor que'];\n  const numericValues = {\n    column: optionsToMap[0],\n    comparison: 'maior que',\n    value: null\n  };\n\n  const removeGlobalSpecs = index => {\n    const temporaryGLobal = globalState.filter.filterByNumericValues;\n    temporaryGLobal.splice(index, 1);\n    setGlobalState({\n      filter: {\n        filterByNumericValues: temporaryGLobal\n      },\n      ...globalState\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"select\", {\n    name: \"column-select\",\n    id: \"column-selector\",\n    \"data-testid\": \"column-filter\",\n    onChange: ev => {\n      numericValues.column = ev.target.value;\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }\n  }, optionsToMap.map((column, index) => /*#__PURE__*/React.createElement(\"option\", {\n    key: `Column${index}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 30\n    }\n  }, column))), /*#__PURE__*/React.createElement(\"select\", {\n    name: \"comparison\",\n    id: \"comparison\",\n    \"data-testid\": \"comparison-filter\",\n    onChange: ev => {\n      numericValues.comparison = ev.target.value;\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }\n  }, columnsCompare.map((columnComparison, index) => /*#__PURE__*/React.createElement(\"option\", {\n    key: `comparison${index}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }\n  }, columnComparison))), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"number\",\n    name: \"valueFilter\",\n    id: \"valueFilter\",\n    \"data-testid\": \"value-filter\",\n    onChange: ev => {\n      numericValues.value = ev.target.value;\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    \"data-testid\": \"button-filter\",\n    onClick: () => {\n      setGlobalState({ ...globalState,\n        filter: { ...filter,\n          filterByNumericValues: [...filter.filterByNumericValues, numericValues]\n        }\n      });\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }\n  }, \"Filtrar\"), test.map((specs, index) => /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"p\", {\n    key: `Specs${index}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 11\n    }\n  }, specs.column), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 11\n    }\n  }, specs.comparison), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 11\n    }\n  }, specs.value), /*#__PURE__*/React.createElement(\"div\", {\n    \"data-testid\": \"filter\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => removeGlobalSpecs(index),\n    type: \"button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }\n  }, \"X\")))), /*#__PURE__*/React.createElement(\"select\", {\n    name: \"columnSort\",\n    id: \"columnSort\",\n    \"data-testid\": \"column-sort\",\n    onChange: ev => {\n      newOrder.column = ev.target.value;\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }\n  }, optionsToMap.splice(0, 0, 'name') && optionsToMap.map((specs, index) => /*#__PURE__*/React.createElement(\"option\", {\n    key: index,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 49\n    }\n  }, specs))), /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"asc\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }\n  }, \"ASC\", /*#__PURE__*/React.createElement(\"input\", {\n    type: \"radio\",\n    name: \"ac/dc\",\n    id: \"asc\",\n    \"data-testid\": \"column-sort-input-asc\",\n    onClick: () => {\n      newOrder.sort = 'ASC';\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"desc\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }\n  }, \"DESC\", /*#__PURE__*/React.createElement(\"input\", {\n    type: \"radio\",\n    name: \"ac/dc\",\n    id: \"desc\",\n    \"data-testid\": \"column-sort-input-desc\",\n    onClick: () => {\n      newOrder.sort = 'DESC';\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    \"data-testid\": \"column-sort-button\",\n    onClick: () => setGlobalState({ ...globalState,\n      order: { ...newOrder\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }\n  }, \"Ordenar\"));\n}","map":{"version":3,"sources":["/home/allan/Projects/Trybe-Projects/sd-013-b-project-starwars-planets-search/src/Pages/PlanetsColumnFilter.jsx"],"names":["React","useContext","PlanetsContext","PlanetsColumnFilter","globalState","setGlobalState","filter","test","filterByNumericValues","newOrder","column","sort","options","population","orbital_period","diameter","rotation_period","surface_water","forEach","specs","optionsToMap","Object","keys","columnsCompare","numericValues","comparison","value","removeGlobalSpecs","index","temporaryGLobal","splice","ev","target","map","columnComparison","order"],"mappings":"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","sourcesContent":["import React, { useContext } from 'react';\nimport PlanetsContext from '../Context/PlanetsContext';\n\nexport default function PlanetsColumnFilter() {\n  const globalState = useContext(PlanetsContext);\n  const { setGlobalState, filter } = useContext(PlanetsContext);\n  const test = filter.filterByNumericValues;\n  const newOrder = { column: 'name', sort: 'ASC' };\n\n  const options = { population: 'population',\n    orbital_period: 'orbital_period',\n    diameter: 'diameter',\n    rotation_period: 'rotation_period',\n    surface_water: 'surface_water' };\n\n  filter.filterByNumericValues.forEach((specs) => delete options[specs.column]);\n\n  const optionsToMap = Object.keys(options);\n\n  const columnsCompare = ['maior que', 'igual a', 'menor que'];\n  const numericValues = {\n    column: optionsToMap[0], comparison: 'maior que', value: null };\n\n  const removeGlobalSpecs = (index) => {\n    const temporaryGLobal = globalState.filter.filterByNumericValues;\n    temporaryGLobal.splice(index, 1);\n    setGlobalState(\n      { filter: { filterByNumericValues: temporaryGLobal }, ...globalState },\n    );\n  };\n\n  return (\n    <>\n      <select\n        name=\"column-select\"\n        id=\"column-selector\"\n        data-testid=\"column-filter\"\n        onChange={ (ev) => { numericValues.column = ev.target.value; } }\n      >\n        {optionsToMap.map(\n          (column, index) => <option key={ `Column${index}` }>{column}</option>,\n        )}\n      </select>\n      <select\n        name=\"comparison\"\n        id=\"comparison\"\n        data-testid=\"comparison-filter\"\n        onChange={ (ev) => { numericValues.comparison = ev.target.value; } }\n      >\n        {columnsCompare.map(\n          (columnComparison, index) => (\n            <option key={ `comparison${index}` }>{columnComparison}</option>),\n        )}\n      </select>\n      <input\n        type=\"number\"\n        name=\"valueFilter\"\n        id=\"valueFilter\"\n        data-testid=\"value-filter\"\n        onChange={ (ev) => { numericValues.value = ev.target.value; } }\n      />\n      <button\n        type=\"button\"\n        data-testid=\"button-filter\"\n        onClick={ () => {\n          setGlobalState({ ...globalState,\n            filter: { ...filter,\n              filterByNumericValues:\n            [...filter.filterByNumericValues, numericValues] } });\n        } }\n      >\n        Filtrar\n      </button>\n      {test.map((specs, index) => (\n        <>\n          <p key={ `Specs${index}` }>{specs.column}</p>\n          <p>{specs.comparison}</p>\n          <p>{specs.value}</p>\n          <div data-testid=\"filter\">\n            <button\n              onClick={ () => removeGlobalSpecs(index) }\n              type=\"button\"\n            >\n              X\n            </button>\n          </div>\n        </>))}\n      <select\n        name=\"columnSort\"\n        id=\"columnSort\"\n        data-testid=\"column-sort\"\n        onChange={ (ev) => {\n          newOrder.column = ev.target.value;\n        } }\n      >\n        {\n          optionsToMap.splice(0, 0, 'name')\n          && optionsToMap.map((specs, index) => <option key={ index }>{specs}</option>)\n        }\n      </select>\n      <label htmlFor=\"asc\">\n        ASC\n        <input\n          type=\"radio\"\n          name=\"ac/dc\"\n          id=\"asc\"\n          data-testid=\"column-sort-input-asc\"\n          onClick={ () => {\n            newOrder.sort = 'ASC';\n          } }\n        />\n      </label>\n      <label htmlFor=\"desc\">\n        DESC\n        <input\n          type=\"radio\"\n          name=\"ac/dc\"\n          id=\"desc\"\n          data-testid=\"column-sort-input-desc\"\n          onClick={ () => {\n            newOrder.sort = 'DESC';\n          } }\n        />\n      </label>\n      <button\n        type=\"button\"\n        data-testid=\"column-sort-button\"\n        onClick={ () => setGlobalState(\n          { ...globalState, order: { ...newOrder } },\n        ) }\n      >\n        Ordenar\n      </button>\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}