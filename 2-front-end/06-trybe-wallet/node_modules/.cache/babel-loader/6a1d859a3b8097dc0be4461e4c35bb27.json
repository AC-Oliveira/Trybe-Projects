{"ast":null,"code":"var _jsxFileName = \"/home/allan/Projects/Trybe-Projects/sd-013-b-project-trybewallet/src/pages/Wallet.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { getCurrencyThunk } from '../actions';\nimport Form from './Utils/Form';\n\nclass Wallet extends React.Component {\n  componentDidMount() {\n    const {\n      setCurrency\n    } = this.props;\n    setCurrency();\n  }\n\n  expensesCalc() {\n    const {\n      state: {\n        wallet: {\n          expenses\n        }\n      }\n    } = this.props;\n    const expensesList = expenses.map(expense => {\n      const currentCurrencyExpensePrice = expense.exchangeRates[expense.currency].ask;\n      const currentCurrencyQuotation = expense.value;\n      const expensePrice = (currentCurrencyExpensePrice * currentCurrencyQuotation).toFixed(2);\n      return expensePrice;\n    });\n    const totalExpenseInBRL = expensesList.reduce((curr, acc) => {\n      acc = Number(acc);\n      curr += acc;\n      return Number(curr.toFixed(2));\n    }, 0);\n    return totalExpenseInBRL;\n  }\n\n  render() {\n    const {\n      state: {\n        user,\n        wallet: {\n          currencies,\n          expenses\n        }\n      }\n    } = this.props;\n    const currenciesArray = Object.keys(currencies);\n    currenciesArray.splice(1, 1);\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"p\", {\n      \"data-testid\": \"email-field\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }\n    }, user.email), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }\n    }, \"Gastos: R$\", /*#__PURE__*/React.createElement(\"span\", {\n      \"data-testid\": \"total-field\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 11\n      }\n    }, expenses.length === 0 ? 0 : this.expensesCalc())), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }\n    }, \"C\\xE2mbio:\", /*#__PURE__*/React.createElement(\"span\", {\n      \"data-testid\": \"header-currency-field\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 11\n      }\n    }, \"BRL\")), /*#__PURE__*/React.createElement(Form, {\n      currencies: currencies,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nWallet.propTypes = {\n  setCurrency: PropTypes.func.isRequired,\n  state: PropTypes.arrayOf().isRequired\n};\n\nconst mapStateToProps = state => ({\n  state\n});\n\nconst mapDispatchToProps = dispatch => ({\n  setCurrency: () => dispatch(getCurrencyThunk())\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Wallet);","map":{"version":3,"sources":["/home/allan/Projects/Trybe-Projects/sd-013-b-project-trybewallet/src/pages/Wallet.js"],"names":["React","PropTypes","connect","getCurrencyThunk","Form","Wallet","Component","componentDidMount","setCurrency","props","expensesCalc","state","wallet","expenses","expensesList","map","expense","currentCurrencyExpensePrice","exchangeRates","currency","ask","currentCurrencyQuotation","value","expensePrice","toFixed","totalExpenseInBRL","reduce","curr","acc","Number","render","user","currencies","currenciesArray","Object","keys","splice","email","length","propTypes","func","isRequired","arrayOf","mapStateToProps","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { getCurrencyThunk } from '../actions';\nimport Form from './Utils/Form';\n\nclass Wallet extends React.Component {\n  componentDidMount() {\n    const { setCurrency } = this.props;\n    setCurrency();\n  }\n\n  expensesCalc() {\n    const { state: { wallet: { expenses } } } = this.props;\n    const expensesList = expenses\n      .map((expense) => {\n        const currentCurrencyExpensePrice = (expense.exchangeRates[expense.currency].ask);\n        const currentCurrencyQuotation = expense.value;\n        const expensePrice = (currentCurrencyExpensePrice * currentCurrencyQuotation)\n          .toFixed(2);\n        return expensePrice;\n      });\n    const totalExpenseInBRL = expensesList.reduce((curr, acc) => {\n      acc = Number(acc);\n      curr += acc;\n      return Number(curr.toFixed(2));\n    }, 0);\n    return totalExpenseInBRL;\n  }\n\n  render() {\n    const { state: { user, wallet: { currencies, expenses } } } = this.props;\n    const currenciesArray = Object.keys(currencies);\n    currenciesArray.splice(1, 1);\n    return (\n      <>\n        <p data-testid=\"email-field\">{user.email}</p>\n        <p>\n          Gastos: R$\n          <span data-testid=\"total-field\">\n            {expenses.length === 0 ? 0\n              : this.expensesCalc()}\n          </span>\n        </p>\n        <p>\n          CÃ¢mbio:\n          <span data-testid=\"header-currency-field\">BRL</span>\n        </p>\n        <Form currencies={ currencies } />\n      </>\n    );\n  }\n}\n\nWallet.propTypes = {\n  setCurrency: PropTypes.func.isRequired,\n  state: PropTypes.arrayOf().isRequired,\n};\n\nconst mapStateToProps = (state) => ({ state });\nconst mapDispatchToProps = (dispatch) => ({\n  setCurrency: () => dispatch(getCurrencyThunk()),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Wallet);\n"]},"metadata":{},"sourceType":"module"}