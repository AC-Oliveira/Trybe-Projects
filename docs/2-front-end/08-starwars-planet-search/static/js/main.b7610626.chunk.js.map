{"version":3,"sources":["Context/PlanetsContext.js","Context/PlanetsProvider.jsx","Pages/PlanetsTable.jsx","Pages/Utils/CompareCases.js","Pages/PlanetsNameFilter.jsx","Pages/PlanetsColumnFilter.jsx","App.js","index.js"],"names":["PlanetsContext","createContext","apiURL","defaultState","filter","filterByName","filterByNumericValues","planetsList","order","column","sort","PlanetsProvider","children","useState","globalState","setGlobalState","useEffect","a","fetch","then","res","json","apiRequest","data","results","fetchData","Provider","value","PlanetsTable","useContext","planet","name","includes","length","forEach","specs","planetValue","Number","filterValue","str","compareCases","comparison","b","sortNamesASC","sortNamesDESC","sortPlanetsColumns","map","key","data-testid","rotation_period","orbital_period","diameter","climate","gravity","terrain","surface_water","population","films","film","created","edited","url","PlanetsNameFilter","type","onChange","ev","target","PlanetsColumnFilter","test","newOrder","options","optionsToMap","Object","keys","numericValues","id","index","columnComparison","onClick","temporaryGLobal","splice","removeGlobalSpecs","htmlFor","App","ReactDOM","render","document","getElementById"],"mappings":"oWAIeA,EAFQC,0BCEjBC,EAAS,iDAETC,EAAe,CACnBC,OAAQ,CAAEC,aAAc,GAAIC,sBAAuB,IACnDC,YAAa,GACbC,MAAO,CACLC,OAAQ,OACRC,KAAM,QA6BKC,MA1Bf,YAAwC,IAAbC,EAAY,EAAZA,SAAY,EACCC,mBAASV,GADV,mBAC9BW,EAD8B,KACjBC,EADiB,KAerC,OAZAC,qBAAU,WAAM,4CACd,8BAAAC,EAAA,sEAC2BC,MAAMhB,GAAQiB,MAAK,SAACC,GAAD,OAASA,EAAIC,UAD3D,OACQC,EADR,OAEQC,EAAOD,EAAWE,QACxBT,GAAe,8BAAC,eAAWD,GAAZ,IACbP,YAAagB,EACbR,sBALJ,4CADc,uBAAC,WAAD,wBASdU,KACC,IAGD,kBAAC,EAAeC,SAAhB,CAAyBC,MAAQb,GAC9BF,IC3BQ,SAASgB,IAAgB,IAChCrB,EAAgBsB,qBAAW7B,GAA3BO,YAD+B,EAIcsB,qBAAW7B,GAJzB,IAG7BI,OACNC,EAJmC,EAInCA,aAAcC,EAJqB,EAIrBA,sBAAyBE,EAJJ,EAIIA,MAmBzC,MAjBqB,KAAjBH,IACFE,EAAcA,EAAYH,QAAO,SAAC0B,GAAD,OAAYA,EAAOC,KAAKC,SAAS3B,OAEhEC,EAAsB2B,OAAS,GACjC3B,EAAsB4B,SAAQ,SAACC,GAC7B5B,EAAcA,EAAYH,QACxB,SAAC0B,GACC,IAAMM,EAAcC,OAAOP,EAAOK,EAAM1B,SAClC6B,EAAcD,OAAOF,EAAMR,OACjC,OCnBH,SAAsBY,EAAKD,EAAaF,GAC7C,OAAQG,GACR,IAAK,YACH,OAAOD,EAAcF,EAEvB,IAAK,UACH,OAAOE,IAAgBF,EAEzB,QACE,OAAOE,EAAcF,GDURI,CAAaL,EAAMM,WAAYH,EAAaF,SAM3D7B,ECaK,SAA4BC,EAAOD,GACxC,OAAKA,EAAY0B,OAEH,SADVzB,EACDC,QAAoC,QAAfD,EAAME,KA5BhC,SAAsBF,EAAOD,GAS3B,MAPqB,SAAjBC,EAAMC,QAAoC,QAAfD,EAAME,MACnCH,EAAYG,MAAK,SAACO,EAAGyB,GACnB,OAAIzB,EAAEc,KAAOW,EAAEX,KAAa,EACxBd,EAAEc,KAAOW,EAAEX,MAJH,EAKL,KAGJxB,EAmB8CoC,CAAanC,EAAOD,GAE3D,SADVC,EACDC,QAAoC,SAAfD,EAAME,KAnBhC,SAAuBF,EAAOD,GAW5B,MATqB,SAAjBC,EAAMC,QAAoC,SAAfD,EAAME,MACnCH,EAAYG,MACV,SAACO,EAAGyB,GACF,OAAIzB,EAAEc,KAAOW,EAAEX,MAJL,EAKNd,EAAEc,KAAOW,EAAEX,KAAa,EACrB,KAINxB,EAQ+CqC,CAAcpC,EAAOD,GACxD,QAAfC,EAAME,KACDH,EACJG,MAAK,SAACO,EAAGyB,GAAJ,OAAUzB,EAAET,EAAMC,QAAUiC,EAAElC,EAAMC,WAE3B,SAAfD,EAAME,KACDH,EACJG,MAAK,SAACO,EAAGyB,GAAJ,OAAUA,EAAElC,EAAMC,QAAUQ,EAAET,EAAMC,gBAF9C,EATgC,GDdlBoC,CAAmBrC,EAAOD,GAGtC,+BACE,4BACE,uCACA,+CACA,8CACA,wCACA,uCACA,uCACA,uCACA,6CACA,0CACA,qCACA,uCACA,sCACA,oCAEDA,EAAYuC,KAAI,SAAChB,GAAD,OACf,wBAAIiB,IAAMjB,EAAOC,MACf,wBAAIiB,cAAY,eAAelB,EAAOC,MACtC,4BAAKD,EAAOmB,iBACZ,4BAAKnB,EAAOoB,gBACZ,4BAAKpB,EAAOqB,UACZ,4BAAKrB,EAAOsB,SACZ,4BAAKtB,EAAOuB,SACZ,4BAAKvB,EAAOwB,SACZ,4BAAKxB,EAAOyB,eACZ,4BAAKzB,EAAO0B,YACZ,4BACG1B,EAAO2B,MAAMX,KAAI,SAACY,GAAD,OAAU,uBAAGX,IAAMjB,EAAOC,MAAQ2B,OAEtD,4BAAK5B,EAAO6B,SACZ,4BAAK7B,EAAO8B,QACZ,4BAAK9B,EAAO+B,UEzCPC,MAhBf,WAA8B,IAAD,EACQjC,qBAAW7B,GAAtCe,EADmB,EACnBA,eAAgBX,EADG,EACHA,OAClBU,EAAce,qBAAW7B,GAE/B,OACE,2BACE+D,KAAK,OACLC,SAAW,SAACC,GACVlD,EAAe,2BAAKD,GAAN,IACZV,OAAO,2BAAMA,GAAP,IAAeC,aAAc4D,EAAGC,OAAOvC,YAEjDqB,cAAY,iB,OCXH,SAASmB,IACtB,IAAMrD,EAAce,qBAAW7B,GADa,EAET6B,qBAAW7B,GAAtCe,EAFoC,EAEpCA,eAAgBX,EAFoB,EAEpBA,OAClBgE,EAAOhE,EAAOE,sBACd+D,EAAW,CAAE5D,OAAQ,OAAQC,KAAM,OAEnC4D,EAAU,CAAEd,WAAY,aAC5BN,eAAgB,iBAChBC,SAAU,WACVF,gBAAiB,kBACjBM,cAAe,iBAEjBnD,EAAOE,sBAAsB4B,SAAQ,SAACC,GAAD,cAAkBmC,EAAQnC,EAAM1B,WAErE,IAAM8D,EAAeC,OAAOC,KAAKH,GAG3BI,EAAgB,CACpBjE,OAAQ8D,EAAa,GAAI9B,WAAY,YAAad,MAAO,MAU3D,OACE,oCACE,4BACEI,KAAK,gBACL4C,GAAG,kBACH3B,cAAY,gBACZgB,SAAW,SAACC,GAASS,EAAcjE,OAASwD,EAAGC,OAAOvC,QAErD4C,EAAazB,KACZ,SAACrC,EAAQmE,GAAT,OAAmB,4BAAQ7B,IAAG,gBAAY6B,IAAWnE,OAGzD,4BACEsB,KAAK,aACL4C,GAAG,aACH3B,cAAY,oBACZgB,SAAW,SAACC,GAASS,EAAcjC,WAAawB,EAAGC,OAAOvC,QA5BzC,CAAC,YAAa,UAAW,aA8B1BmB,KACd,SAAC+B,EAAkBD,GAAnB,OACE,4BAAQ7B,IAAG,oBAAgB6B,IAAWC,OAG5C,2BACEd,KAAK,SACLhC,KAAK,cACL4C,GAAG,cACH3B,cAAY,eACZgB,SAAW,SAACC,GAASS,EAAc/C,MAAQsC,EAAGC,OAAOvC,SAEvD,4BACEoC,KAAK,SACLf,cAAY,gBACZ8B,QAAU,WACR/D,EAAe,2BAAKD,GAAN,IACZV,OAAO,2BAAMA,GAAP,IACJE,sBAAsB,GAAD,mBACnBF,EAAOE,uBADY,CACWoE,WAPxC,WAYCN,EAAKtB,KAAI,SAACX,EAAOyC,GAAR,OACR,oCACE,uBAAG7B,IAAG,eAAW6B,IAAWzC,EAAM1B,QAClC,2BAAI0B,EAAMM,YACV,2BAAIN,EAAMR,OACV,yBAAKqB,cAAY,UACf,4BACE8B,QAAU,kBAzDI,SAACF,GACzB,IAAMG,EAAkBjE,EAAYV,OAAOE,sBAC3CyE,EAAgBC,OAAOJ,EAAO,GAC9B7D,EAAe,aACXX,OAAQ,CAAEE,sBAAuByE,IAAsBjE,IAqDjCmE,CAAkBL,IAClCb,KAAK,UAFP,UAQN,4BACEhC,KAAK,aACL4C,GAAG,aACH3B,cAAY,cACZgB,SAAW,SAACC,GACVI,EAAS5D,OAASwD,EAAGC,OAAOvC,QAI5B4C,EAAaS,OAAO,EAAG,EAAG,SACvBT,EAAazB,KAAI,SAACX,EAAOyC,GAAR,OAAkB,4BAAQ7B,IAAM6B,GAASzC,OAGjE,2BAAO+C,QAAQ,OAAf,MAEE,2BACEnB,KAAK,QACLhC,KAAK,QACL4C,GAAG,MACH3B,cAAY,wBACZ8B,QAAU,WACRT,EAAS3D,KAAO,UAItB,2BAAOwE,QAAQ,QAAf,OAEE,2BACEnB,KAAK,QACLhC,KAAK,QACL4C,GAAG,OACH3B,cAAY,yBACZ8B,QAAU,WACRT,EAAS3D,KAAO,WAItB,4BACEqD,KAAK,SACLf,cAAY,qBACZ8B,QAAU,kBAAM/D,EAAe,2BACxBD,GADuB,IACVN,MAAM,eAAM6D,QAJlC,YC1GSc,MAVf,WACE,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,MACA,kBAAChB,EAAD,MACA,kBAACvC,EAAD,QCTNwD,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.b7610626.chunk.js","sourcesContent":["import { createContext } from 'react';\n\nconst PlanetsContext = createContext();\n\nexport default PlanetsContext;\n","import PropTypes from 'prop-types';\nimport React, { useEffect, useState } from 'react';\nimport PlanetsContext from './PlanetsContext';\n\nconst apiURL = 'https://swapi-trybe.herokuapp.com/api/planets/';\n\nconst defaultState = {\n  filter: { filterByName: '', filterByNumericValues: [] },\n  planetsList: [],\n  order: {\n    column: 'name',\n    sort: 'ASC',\n  } };\n\nfunction PlanetsProvider({ children }) {\n  const [globalState, setGlobalState] = useState(defaultState);\n\n  useEffect(() => {\n    async function fetchData() {\n      const apiRequest = await fetch(apiURL).then((res) => res.json());\n      const data = apiRequest.results;\n      setGlobalState(() => ({ ...globalState,\n        planetsList: data,\n        setGlobalState,\n      }));\n    }\n    fetchData();\n  }, []);\n\n  return (\n    <PlanetsContext.Provider value={ globalState }>\n      {children}\n    </PlanetsContext.Provider>\n  );\n}\n\nPlanetsProvider.propTypes = {\n  children: PropTypes.func.isRequired,\n};\n\nexport default PlanetsProvider;\n","import React, { useContext } from 'react';\nimport PlanetsContext from '../Context/PlanetsContext';\nimport { compareCases, sortPlanetsColumns } from './Utils/CompareCases';\n\nexport default function PlanetsTable() {\n  let { planetsList } = useContext(PlanetsContext);\n\n  const { filter: {\n    filterByName, filterByNumericValues }, order } = useContext(PlanetsContext);\n\n  if (filterByName !== '') {\n    planetsList = planetsList.filter((planet) => planet.name.includes(filterByName));\n  }\n  if (filterByNumericValues.length > 0) {\n    filterByNumericValues.forEach((specs) => {\n      planetsList = planetsList.filter(\n        (planet) => {\n          const planetValue = Number(planet[specs.column]);\n          const filterValue = Number(specs.value);\n          return compareCases(specs.comparison, filterValue, planetValue);\n        },\n      );\n    });\n  }\n\n  planetsList = sortPlanetsColumns(order, planetsList);\n\n  return (\n    <table>\n      <tr>\n        <th>Planets</th>\n        <th>Rotation Period</th>\n        <th>Orbital Period</th>\n        <th>Diameter</th>\n        <th>Climate</th>\n        <th>Gravity</th>\n        <th>Terrain</th>\n        <th>Surface Water</th>\n        <th>Population</th>\n        <th>Films</th>\n        <th>Created</th>\n        <th>Edited</th>\n        <th>URL</th>\n      </tr>\n      {planetsList.map((planet) => (\n        <tr key={ planet.name }>\n          <td data-testid=\"planet-name\">{planet.name}</td>\n          <td>{planet.rotation_period}</td>\n          <td>{planet.orbital_period}</td>\n          <td>{planet.diameter}</td>\n          <td>{planet.climate}</td>\n          <td>{planet.gravity}</td>\n          <td>{planet.terrain}</td>\n          <td>{planet.surface_water}</td>\n          <td>{planet.population}</td>\n          <td>\n            {planet.films.map((film) => <p key={ planet.name }>{film}</p>)}\n          </td>\n          <td>{planet.created}</td>\n          <td>{planet.edited}</td>\n          <td>{planet.url}</td>\n        </tr>\n      ))}\n    </table>\n  );\n}\n","export function compareCases(str, filterValue, planetValue) {\n  switch (str) {\n  case 'menor que':\n    return filterValue > planetValue;\n\n  case 'igual a':\n    return filterValue === planetValue;\n\n  default:\n    return filterValue < planetValue;\n  }\n}\n\nfunction sortNamesASC(order, planetsList) {\n  const MENUSUM = -1;\n  if (order.column === 'name' && order.sort === 'ASC') {\n    planetsList.sort((a, b) => {\n      if (a.name > b.name) return 1;\n      if (a.name < b.name) return MENUSUM;\n      return 0;\n    });\n  }\n  return planetsList;\n}\nfunction sortNamesDESC(order, planetsList) {\n  const MENUSUM = -1;\n  if (order.column === 'name' && order.sort === 'DESC') {\n    planetsList.sort(\n      (a, b) => {\n        if (a.name > b.name) return MENUSUM;\n        if (a.name < b.name) return 1;\n        return 0;\n      },\n    );\n  }\n  return planetsList;\n}\n\nexport function sortPlanetsColumns(order, planetsList) {\n  if (!planetsList.length) return [];\n  if (order\n    .column === 'name' && order.sort === 'ASC') return sortNamesASC(order, planetsList);\n  if (order\n    .column === 'name' && order.sort === 'DESC') return sortNamesDESC(order, planetsList);\n  if (order.sort === 'ASC') {\n    return planetsList\n      .sort((a, b) => a[order.column] - b[order.column]);\n  }\n  if (order.sort === 'DESC') {\n    return planetsList\n      .sort((a, b) => b[order.column] - a[order.column]);\n  }\n}\n","import React, { useContext } from 'react';\nimport PlanetsContext from '../Context/PlanetsContext';\n\nfunction PlanetsNameFilter() {\n  const { setGlobalState, filter } = useContext(PlanetsContext);\n  const globalState = useContext(PlanetsContext);\n\n  return (\n    <input\n      type=\"text\"\n      onChange={ (ev) => {\n        setGlobalState({ ...globalState,\n          filter: { ...filter, filterByName: ev.target.value } });\n      } }\n      data-testid=\"name-filter\"\n    />\n  );\n}\n\nexport default PlanetsNameFilter;\n","import React, { useContext } from 'react';\nimport PlanetsContext from '../Context/PlanetsContext';\n\nexport default function PlanetsColumnFilter() {\n  const globalState = useContext(PlanetsContext);\n  const { setGlobalState, filter } = useContext(PlanetsContext);\n  const test = filter.filterByNumericValues;\n  const newOrder = { column: 'name', sort: 'ASC' };\n\n  const options = { population: 'population',\n    orbital_period: 'orbital_period',\n    diameter: 'diameter',\n    rotation_period: 'rotation_period',\n    surface_water: 'surface_water' };\n\n  filter.filterByNumericValues.forEach((specs) => delete options[specs.column]);\n\n  const optionsToMap = Object.keys(options);\n\n  const columnsCompare = ['maior que', 'igual a', 'menor que'];\n  const numericValues = {\n    column: optionsToMap[0], comparison: 'maior que', value: null };\n\n  const removeGlobalSpecs = (index) => {\n    const temporaryGLobal = globalState.filter.filterByNumericValues;\n    temporaryGLobal.splice(index, 1);\n    setGlobalState(\n      { filter: { filterByNumericValues: temporaryGLobal }, ...globalState },\n    );\n  };\n\n  return (\n    <>\n      <select\n        name=\"column-select\"\n        id=\"column-selector\"\n        data-testid=\"column-filter\"\n        onChange={ (ev) => { numericValues.column = ev.target.value; } }\n      >\n        {optionsToMap.map(\n          (column, index) => <option key={ `Column${index}` }>{column}</option>,\n        )}\n      </select>\n      <select\n        name=\"comparison\"\n        id=\"comparison\"\n        data-testid=\"comparison-filter\"\n        onChange={ (ev) => { numericValues.comparison = ev.target.value; } }\n      >\n        {columnsCompare.map(\n          (columnComparison, index) => (\n            <option key={ `comparison${index}` }>{columnComparison}</option>),\n        )}\n      </select>\n      <input\n        type=\"number\"\n        name=\"valueFilter\"\n        id=\"valueFilter\"\n        data-testid=\"value-filter\"\n        onChange={ (ev) => { numericValues.value = ev.target.value; } }\n      />\n      <button\n        type=\"button\"\n        data-testid=\"button-filter\"\n        onClick={ () => {\n          setGlobalState({ ...globalState,\n            filter: { ...filter,\n              filterByNumericValues:\n            [...filter.filterByNumericValues, numericValues] } });\n        } }\n      >\n        Filtrar\n      </button>\n      {test.map((specs, index) => (\n        <>\n          <p key={ `Specs${index}` }>{specs.column}</p>\n          <p>{specs.comparison}</p>\n          <p>{specs.value}</p>\n          <div data-testid=\"filter\">\n            <button\n              onClick={ () => removeGlobalSpecs(index) }\n              type=\"button\"\n            >\n              X\n            </button>\n          </div>\n        </>))}\n      <select\n        name=\"columnSort\"\n        id=\"columnSort\"\n        data-testid=\"column-sort\"\n        onChange={ (ev) => {\n          newOrder.column = ev.target.value;\n        } }\n      >\n        {\n          optionsToMap.splice(0, 0, 'name')\n          && optionsToMap.map((specs, index) => <option key={ index }>{specs}</option>)\n        }\n      </select>\n      <label htmlFor=\"asc\">\n        ASC\n        <input\n          type=\"radio\"\n          name=\"ac/dc\"\n          id=\"asc\"\n          data-testid=\"column-sort-input-asc\"\n          onClick={ () => {\n            newOrder.sort = 'ASC';\n          } }\n        />\n      </label>\n      <label htmlFor=\"desc\">\n        DESC\n        <input\n          type=\"radio\"\n          name=\"ac/dc\"\n          id=\"desc\"\n          data-testid=\"column-sort-input-desc\"\n          onClick={ () => {\n            newOrder.sort = 'DESC';\n          } }\n        />\n      </label>\n      <button\n        type=\"button\"\n        data-testid=\"column-sort-button\"\n        onClick={ () => setGlobalState(\n          { ...globalState, order: { ...newOrder } },\n        ) }\n      >\n        Ordenar\n      </button>\n    </>\n  );\n}\n","import React from 'react';\nimport './App.css';\nimport PlanetsProvider from './Context/PlanetsProvider';\nimport PlanetsTable from './Pages/PlanetsTable';\nimport PlanetsNameFilter from './Pages/PlanetsNameFilter';\nimport PlanetsColumnFilter from './Pages/PlanetsColumnFilter';\n// import PlanetsFilter from './Pages/PlanetsFilter';\n\nfunction App() {\n  return (\n    <PlanetsProvider>\n      <PlanetsNameFilter />\n      <PlanetsColumnFilter />\n      <PlanetsTable />\n    </PlanetsProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}