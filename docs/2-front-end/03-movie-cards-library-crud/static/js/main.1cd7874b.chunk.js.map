{"version":3,"sources":["components/Loading.js","components/MovieForm.js","components/MovieCard.js","services/movieData.js","services/movieAPI.js","pages/EditMovie.js","pages/MovieDetails.js","pages/MovieList.js","pages/NewMovie.js","pages/NotFound.js","App.js","serviceWorker.js","index.js"],"names":["Loading","Component","MovieForm","props","state","movie","handleSubmit","bind","onSubmit","this","field","newValue","setState","title","htmlFor","placeholder","id","type","className","value","onChange","event","updateMovie","target","subtitle","imagePath","storyline","genre","rating","step","min","max","onClick","renderTitleInput","renderSubtitleInput","renderImagePathInput","renderStorylineInput","renderGenreSelection","renderRatingInput","renderSubmitButton","React","MovieCard","data-testid","key","alt","src","to","movies","bookmarked","localStorage","setItem","JSON","stringify","data","readMovies","parse","getItem","saveMovies","simulateRequest","response","callback","setTimeout","getMovies","Promise","resolve","getMovie","movieId","find","mov","parseInt","updatedMovie","map","createMovie","movieData","nextId","length","newMovie","deleteMovie","filter","status","i","EditMovie","shouldRedirect","updatedState","updateState","match","params","movieAPI","getGetMovie","MovieDetails","isLoading","movieDel","then","movieMount","MovieList","moviesMount","prevState","arr","onMount","NewMovie","console","log","NotFound","App","exact","path","render","Boolean","window","location","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"mkBAUeA,EARF,kHAKV,OALU,mCACX,WACE,OACE,kDAEH,EALU,CAASC,a,gBCgLPC,EA/KA,kDACb,WAAYC,GAAQ,IAAD,EAGgC,OAHhC,qBACjB,cAAMA,IACDC,MAAK,eAAQD,EAAME,OACxB,EAAKC,aAAe,EAAKA,aAAaC,KAAK,gBAAM,EA4JlD,OA3JA,yCAED,YAEEC,EADqBC,KAAKN,MAAlBK,UACCC,KAAKL,SACf,yBAED,SAAYM,EAAOC,GACjBF,KAAKG,SAAS,eAAGF,EAAQC,MAC1B,8BAED,WAAoB,IAAD,OACTE,EAAUJ,KAAKL,MAAfS,MAER,OACE,6BACE,2BAAOC,QAAQ,eACb,2BACEC,YAAY,qBACZC,GAAG,cACHC,KAAK,OACLC,UAAU,WACVC,MAAQN,EACRO,SAAW,SAACC,GAAK,OAAK,EAAKC,YAAY,QAASD,EAAME,OAAOJ,UAC7D,gBAKT,iCAED,WAAuB,IAAD,OACZK,EAAaf,KAAKL,MAAlBoB,SAER,OACE,6BACE,2BAAOV,QAAQ,kBACb,2BACEC,YAAY,wBACZC,GAAG,iBACHC,KAAK,OACLE,MAAQK,EACRJ,SAAW,SAACC,GAAK,OAAK,EAAKC,YAAY,WAAYD,EAAME,OAAOJ,UAChE,mBAKT,kCAED,WAAwB,IAAD,OACbM,EAAchB,KAAKL,MAAnBqB,UAER,OACE,yBAAKP,UAAU,OACb,2BAAOJ,QAAQ,eACb,2BACEC,YAAY,6BACZC,GAAG,cACHC,KAAK,OACLE,MAAQM,EACRL,SAAW,SAACC,GAAK,OAAK,EAAKC,YAAY,YAAaD,EAAME,OAAOJ,UACjE,aAKT,kCAED,WAAwB,IAAD,OACbO,EAAcjB,KAAKL,MAAnBsB,UAER,OACE,6BACE,2BAAOZ,QAAQ,mBACb,8BACEE,GAAG,kBACHG,MAAQO,EACRN,SAAW,SAACC,GAAK,OAAK,EAAKC,YAAY,YAAaD,EAAME,OAAOJ,UACjE,cAKT,kCAED,WAAwB,IAAD,OACbQ,EAAUlB,KAAKL,MAAfuB,MACR,OACE,6BACE,2BAAOb,QAAQ,eAAa,YAE1B,4BACEE,GAAG,cACHG,MAAQQ,EACRP,SAAW,SAACC,GAAK,OAAK,EAAKC,YAAY,QAASD,EAAME,OAAOJ,SAE7D,4BAAQA,MAAM,UAAQ,cACtB,4BAAQA,MAAM,UAAQ,cACtB,4BAAQA,MAAM,YAAU,YACxB,4BAAQA,MAAM,WAAS,iBAKhC,+BAED,WAAqB,IAAD,OACVS,EAAWnB,KAAKL,MAAhBwB,OACR,OACE,6BACE,2BAAOd,QAAQ,gBACb,2BACEC,YAAY,mCACZC,GAAG,eACHC,KAAK,SACLY,KAAO,GACPC,IAAM,EACNC,IAAM,EACNZ,MAAQS,EACRR,SAAW,SAACC,GAAK,OAAK,EAAKC,YAAY,SAAUD,EAAME,OAAOJ,UAC9D,sBAKT,gCAED,WACE,OACE,6BACE,4BACEF,KAAK,SACLe,QAAUvB,KAAKH,cAAc,aAMpC,oBAED,WACE,OACE,6BACE,8BACGG,KAAKwB,mBACLxB,KAAKyB,sBACLzB,KAAK0B,uBACL1B,KAAK2B,uBACL3B,KAAK4B,uBACL5B,KAAK6B,oBACL7B,KAAK8B,2BAIb,EAhKY,CAASC,IAAMvC,WC8BfwC,EA7BA,kHAcZ,OAdY,mCACb,WACE,IAAQpC,EAAUI,KAAKN,MAAfE,MACR,OACE,yBAAKqC,cAAY,aAAaC,IAAMtC,EAAMW,IACxC,4BAAKX,EAAMQ,OACX,yBAAK+B,IAAI,cAAcC,IAAG,aAASxC,EAAMoB,aACzC,+CAAkBpB,EAAMmB,WACxB,2BAAInB,EAAMqB,WACV,4CAAerB,EAAMsB,QACrB,6CAAgBtB,EAAMuB,SACtB,kBAAC,IAAI,CAACkB,GAAE,kBAAczC,EAAMW,KAAM,qBAGvC,EAdY,CAASwB,IAAMvC,W,QCiDf8C,EArDA,CACb,CACE/B,GAAI,EACJH,MAAO,cACPW,SAAU,mBACVE,UAAW,iKACXE,OAAQ,IACRH,UAAW,0CACXuB,YAAY,EACZrB,MAAO,UAET,CACEX,GAAI,EACJH,MAAO,gBACPW,SAAU,iBACVE,UAAW,4HACXE,OAAQ,IACRH,UAAW,0CACXuB,YAAY,EACZrB,MAAO,WAET,CACEX,GAAI,EACJH,MAAO,qBACPW,SAAU,qBACVE,UAAW,qJACXE,OAAQ,EACRH,UAAW,oCACXuB,YAAY,EACZrB,MAAO,UAET,CACEX,GAAI,EACJH,MAAO,kBACPW,SAAU,kBACVE,UAAW,2LACXE,OAAQ,IACRH,UAAW,6BACXuB,YAAY,EACZrB,MAAO,UAET,CACEX,GAAI,EACJH,MAAO,gBACPW,SAAU,WACVE,UAAW,iKACXE,OAAQ,IACRH,UAAW,oCACXuB,YAAY,EACZrB,MAAO,YC/CXsB,aAAaC,QAAQ,SAAUC,KAAKC,UAAUC,IAE9C,IAAMC,EAAa,WAAH,OAASH,KAAKI,MAAMN,aAAaO,QAAQ,YACnDC,EAAa,SAACV,GAAM,OAAKE,aAAaC,QAAQ,SAAUC,KAAKC,UAAUL,KAYvEW,EAAkB,SAACC,GAAQ,OAAK,SAACC,GACrCC,YAAW,WACTD,EAASD,KAZG,OAgBHG,EAAY,WAAH,OACpB,IAAIC,SAAQ,SAACC,GACX,IAAMjB,EAASO,IACfI,EAAgBX,EAAhBW,CAAwBM,OAIfC,EAAW,SAACC,GACvB,IAAM7D,EAAQiD,IAAaa,MAAK,SAACC,GAAG,OAAKA,EAAIpD,KAAOqD,SAASH,EAAS,OACtE,OAAO,IAAIH,SAAQ,SAACC,GAClBN,EAAgBrD,EAAhBqD,CAAuBM,OAId1C,EAAc,SAACgD,GAAY,OACtC,IAAIP,SAAQ,SAACC,GACX,IAAMjB,EAASO,IAAaiB,KAAI,SAAClE,GAC/B,OAAIA,EAAMW,KAAOqD,SAASC,EAAatD,GAAI,IAClC,2BAAKX,GAAUiE,GAEjBjE,KAEToD,EAAWV,GACXW,EAtCmB,KAsCnBA,CAAgCM,OAIvBQ,EAAc,SAACC,GAAS,OACnC,IAAIV,SAAQ,SAACC,GACX,IAAIjB,EAASO,IACPoB,EAAS3B,EAAOA,EAAO4B,OAAS,GAAG3D,GAAK,EACxC4D,EAAQ,2BAAQH,GAAS,IAAEzD,GAAI0D,IACrC3B,EAAM,sBAAOA,GAAM,CAAE6B,IACrBnB,EAAWV,GACXW,EAjDmB,KAiDnBA,CAAgCM,OAIvBa,EAAc,SAACX,GAC1B,IAAInB,EAASO,IAIb,OAHAP,EAASA,EAAO+B,QAAO,SAACzE,GAAK,OAAKA,EAAMW,KAAOqD,SAASH,EAAS,OACjET,EAAWV,GAEJ,IAAIgB,SAAQ,SAACC,GAClBN,EAAgB,CAAEqB,OA3DC,MA2DnBrB,CAA4CM,O,aClEhD,ghGAAAgB,GAAA,wBAAAA,EAAA,sBAAAA,GAAA,iBAAAA,GAAA,0oDAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,4bAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,yhBAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,qGAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,sQAGiD,IAwElCC,EAtEA,kDACb,WAAY9E,GAAQ,IAAD,EAQ+B,OAR/B,qBACjB,cAAMA,IACDC,MAAQ,CACXC,MAAO,KACP0E,OAAQ,UACRG,gBAAgB,GAElB,EAAK5E,aAAe,EAAKA,aAAaC,KAAK,gBAC3C,EAAK4E,aAAe,EAAKC,YAAY7E,KAAK,gBAAM,EA6CjD,OA5CA,8CAED,WAAqB,IAAD,OACSS,EAAWP,KAAKN,MAAnCkF,MAASC,OAAUtE,IACV,uCAAG,oGACEuE,EAAkBvE,GAAI,KAAD,EAAnCX,EAAK,OACX,EAAK+E,YAAY/E,EAAO,aAAa,2CACtC,kBAHgB,mCAIjBmF,KACD,0BAED,SAAalB,GACX,IAAQY,EAAmBzE,KAAKL,MAAxB8E,eACRzE,KAAKG,SAAS,CACZP,MAAOiE,EACPY,gBAAiBA,IAEnBK,EAAqBjB,KACtB,yBAED,SAAYjE,EAAO0E,GACjBtE,KAAKG,SAAS,CACZP,QACA0E,aAEH,oBAED,WACE,MAA0CtE,KAAKL,MAAvC2E,EAAM,EAANA,OAAQG,EAAc,EAAdA,eAAgB7E,EAAK,EAALA,MAChC,OAAI6E,EAEK,kBAAC,IAAQ,CAACpC,GAAG,MAGP,YAAXiC,EAEK,kBAAC,EAAO,MAIf,yBAAKrC,cAAY,cACf,kBAAC,EAAS,CAACrC,MAAQA,EAAQG,SAAWC,KAAKH,oBAGhD,EAtDY,CAASL,aCmFTwF,EAnFG,kDAChB,WAAYtF,GAAQ,IAAD,EAMwB,OANxB,qBACjB,cAAMA,IACDC,MAAQ,CACXsF,WAAW,EACXrF,MAAO,MAET,EAAKsF,SAAW,EAAKA,SAASpF,KAAK,gBAAM,EAyD1C,OAxDA,8CAED,WAAqB,IAAD,OACSS,EAAWP,KAAKN,MAAnCkF,MAASC,OAAUtE,GAC3BuE,EAAkBvE,GACf4E,MAAK,SAACvF,GAAK,OAAK,EAAKwF,WAAWxF,QACpC,wBAED,SAAWA,GACT,IAAQqF,EAAcjF,KAAKL,MAAnBsF,UACRjF,KAAKG,SAAS,CACZP,QACAqF,WAAYA,MAEf,sBAED,WACE,IAA2B1E,EAAWP,KAAKN,MAAnCkF,MAASC,OAAUtE,GAC3BuE,EAAqBvE,KACtB,oBAED,WAKE,GAFsBP,KAAKL,MAAnBsF,UAEO,OAAO,kBAAC,EAAO,MAE9B,MACmEjF,KAAKL,MADhEC,MACJW,EAAE,EAAFA,GAAIH,EAAK,EAALA,MAAOa,EAAS,EAATA,UAAWD,EAAS,EAATA,UAAWE,EAAK,EAALA,MAAOC,EAAM,EAANA,OAAQJ,EAAQ,EAARA,SACpD,OACE,yBAAKkB,cAAY,iBACf,6CAAe7B,IACf,yBAAK+B,IAAI,cAAcC,IAAG,aAASpB,KACnC,+CAAkBD,IAClB,gDAAmBE,IACnB,4CAAeC,IACf,6CAAgBC,IAEhB,4BAAQX,KAAK,UACX,kBAAC,IAAI,CAAC6B,GAAG,OAAK,WAIhB,4BAAQ7B,KAAK,UACX,kBAAC,IAAI,CAAC6B,GAAE,UAAM9B,EAAE,UAAS,WAI3B,4BAAQC,KAAK,SAASe,QAAUvB,KAAKkF,UACnC,kBAAC,IAAI,CAAC7C,GAAG,OAAK,iBAMrB,EAhEe,CAAS7C,aC0CZ6F,EA3CA,kDACb,WAAY3F,GAAQ,IAAD,EAMf,OANe,qBACjB,cAAMA,IAEDC,MAAQ,CACXsF,WAAW,EACX3C,OAAQ,IACR,EAiCH,OAhCA,8CAED,WAAqB,IAAD,OAClBwC,IAAqBK,MAAK,SAACvF,GAAK,OAC9B,EAAK0F,YAAY1F,QAEpB,qBAED,WACEI,KAAKG,UAAS,SAACoF,GAAS,MAAM,CAAEN,WAAYM,EAAUN,gBACvD,yBAED,SAAYO,GACVxF,KAAKG,UAAS,iBAAO,CACnBmC,OAAO,YAAKkD,OAEdxF,KAAKyF,YACN,oBAED,WACE,MAA8BzF,KAAKL,MAA3BsF,EAAS,EAATA,UAAW3C,EAAM,EAANA,OAGnB,OAAI2C,EAAkB,yBAAKhD,cAAY,cAAa,kBAAC,EAAO,OAE1D,yBAAKA,cAAY,cACdK,EAAOwB,KACN,SAAClE,GAAK,OAAK,kBAAC,EAAS,CAACA,MAAQA,EAAQsC,IAAMtC,EAAMQ,WAEpD,kBAAC,IAAI,CAACiC,GAAG,eAAa,4BAG3B,EAxCY,CAAS7C,aC6BTkG,EA5BD,kDACZ,WAAYhG,GAAQ,IAAD,EAKgC,OALhC,qBACjB,cAAMA,IACDC,MAAQ,CACX8E,gBAAgB,GAElB,EAAK5E,aAAe,EAAKA,aAAaC,KAAK,gBAAM,EAoBlD,OAnBA,yCAED,SAAaqE,GACX,IAAQM,EAAmBzE,KAAKL,MAAxB8E,eACRkB,QAAQC,IAAIzB,EAAUW,GACtBA,EAAqBX,GACrBnE,KAAKG,SAAS,CACZsE,gBAAiBA,MAEpB,oBAED,WAEE,OAD2BzE,KAAKL,MAAxB8E,eACmB,kBAAC,IAAQ,CAACpC,GAAG,MAEtC,yBAAKJ,cAAY,aACf,kBAAC,EAAS,CAAClC,SAAWC,KAAKH,oBAGhC,EA1BW,CAASL,aCERqG,EAND,kHAGX,OAHW,mCACZ,WACE,OAAO,yBAAK5D,cAAY,aAAW,mCACpC,EAHW,CAASzC,aCwCRsG,MAtCf,WACE,OACE,kBAAC,IAAa,KACZ,kBAAC,IAAM,KACL,kBAAC,IAAK,CAACC,OAAK,EAACC,KAAK,KAChB,kBAAC,EAAS,OAGZ,kBAAC,IAAK,CAACD,OAAK,EAACC,KAAK,eAChB,kBAAC,EAAQ,OAGX,kBAAC,IAAK,CACJD,OAAK,EACLC,KAAK,cACLC,OAAS,SAACvG,GAAK,OACb,kBAAC,EAAkBA,MAIvB,kBAAC,IAAK,CACJqG,OAAK,EACLC,KAAK,mBACLC,OACE,SAACvG,GAAK,OACJ,kBAAC,EAAeA,MAItB,kBAAC,IAAK,CAACsG,KAAK,KACV,kBAAC,EAAQ,UCtBCE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASzB,MACvB,2DCZN0B,IAASL,OAAO,kBAAC,EAAG,MAAKM,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxB,MAAK,SAAAyB,GACjCA,EAAaC,kB","file":"static/js/main.1cd7874b.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Loading extends Component {\n  render() {\n    return (\n      <div>Carregando...</div>\n    );\n  }\n}\n\nexport default Loading;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass MovieForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { ...props.movie };\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleSubmit() {\n    const { onSubmit } = this.props;\n    onSubmit(this.state);\n  }\n\n  updateMovie(field, newValue) {\n    this.setState({ [field]: newValue });\n  }\n\n  renderTitleInput() {\n    const { title } = this.state;\n\n    return (\n      <div>\n        <label htmlFor=\"movie_title\">\n          <input\n            placeholder=\"Insira o título\"\n            id=\"movie_title\"\n            type=\"text\"\n            className=\"validate\"\n            value={ title }\n            onChange={ (event) => this.updateMovie('title', event.target.value) }\n          />\n          Título\n        </label>\n      </div>\n    );\n  }\n\n  renderSubtitleInput() {\n    const { subtitle } = this.state;\n\n    return (\n      <div>\n        <label htmlFor=\"movie_subtitle\">\n          <input\n            placeholder=\"Insira o subtítulo\"\n            id=\"movie_subtitle\"\n            type=\"text\"\n            value={ subtitle }\n            onChange={ (event) => this.updateMovie('subtitle', event.target.value) }\n          />\n          Subtítulo\n        </label>\n      </div>\n    );\n  }\n\n  renderImagePathInput() {\n    const { imagePath } = this.state;\n\n    return (\n      <div className=\"row\">\n        <label htmlFor=\"movie_image\">\n          <input\n            placeholder=\"Insira o caminho da imagem\"\n            id=\"movie_image\"\n            type=\"text\"\n            value={ imagePath }\n            onChange={ (event) => this.updateMovie('imagePath', event.target.value) }\n          />\n          Imagem\n        </label>\n      </div>\n    );\n  }\n\n  renderStorylineInput() {\n    const { storyline } = this.state;\n\n    return (\n      <div>\n        <label htmlFor=\"movie_storyline\">\n          <textarea\n            id=\"movie_storyline\"\n            value={ storyline }\n            onChange={ (event) => this.updateMovie('storyline', event.target.value) }\n          />\n          Sinopse\n        </label>\n      </div>\n    );\n  }\n\n  renderGenreSelection() {\n    const { genre } = this.state;\n    return (\n      <div>\n        <label htmlFor=\"movie_genre\">\n          Gênero\n          <select\n            id=\"movie_genre\"\n            value={ genre }\n            onChange={ (event) => this.updateMovie('genre', event.target.value) }\n          >\n            <option value=\"action\">Ação</option>\n            <option value=\"comedy\">Comédia</option>\n            <option value=\"thriller\">Suspense</option>\n            <option value=\"fantasy\">Fantasia</option>\n          </select>\n        </label>\n      </div>\n    );\n  }\n\n  renderRatingInput() {\n    const { rating } = this.state;\n    return (\n      <div>\n        <label htmlFor=\"movie_rating\">\n          <input\n            placeholder=\"Dê a avaliação do filme\"\n            id=\"movie_rating\"\n            type=\"number\"\n            step={ 0.1 }\n            min={ 0 }\n            max={ 5 }\n            value={ rating }\n            onChange={ (event) => this.updateMovie('rating', event.target.value) }\n          />\n          Avaliação\n        </label>\n      </div>\n    );\n  }\n\n  renderSubmitButton() {\n    return (\n      <div>\n        <button\n          type=\"button\"\n          onClick={ this.handleSubmit }\n        >\n          Submit\n        </button>\n      </div>\n    );\n  }\n\n  render() {\n    return (\n      <div>\n        <form>\n          {this.renderTitleInput()}\n          {this.renderSubtitleInput()}\n          {this.renderImagePathInput()}\n          {this.renderStorylineInput()}\n          {this.renderGenreSelection()}\n          {this.renderRatingInput()}\n          {this.renderSubmitButton()}\n        </form>\n      </div>\n    );\n  }\n}\n\nMovieForm.propTypes = {\n  movie: PropTypes.shape({\n    genre: PropTypes.string.isRequired,\n    imagePath: PropTypes.string.isRequired,\n    rating: PropTypes.number.isRequired,\n    storyline: PropTypes.string.isRequired,\n    subtitle: PropTypes.string.isRequired,\n    title: PropTypes.string.isRequired,\n  }).isRequired,\n  onSubmit: PropTypes.func.isRequired,\n};\n\nexport default MovieForm;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\n\nclass MovieCard extends React.Component {\n  render() {\n    const { movie } = this.props;\n    return (\n      <div data-testid=\"movie-card\" key={ movie.id }>\n        <h1>{movie.title}</h1>\n        <img alt=\"Movie Cover\" src={ `../${movie.imagePath}` } />\n        <p>{ `Subtitle: ${movie.subtitle}` }</p>\n        <p>{movie.storyline}</p>\n        <p>{ `Genre: ${movie.genre}` }</p>\n        <p>{ `Rating: ${movie.rating}` }</p>\n        <Link to={ `/movies/${movie.id}` }>VER DETALHES</Link>\n      </div>\n    );\n  }\n}\n\nMovieCard.propTypes = {\n  movie: PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n    subtitle: PropTypes.string.isRequired,\n    storyline: PropTypes.string.isRequired,\n    genre: PropTypes.string.isRequired,\n    rating: PropTypes.number.isRequired,\n    imagePath: PropTypes.string.isRequired,\n  }).isRequired,\n};\n\nexport default MovieCard;\n","const movies = [\n  {\n    id: 1,\n    title: 'Kingsglaive',\n    subtitle: 'Final Fantasy XV',\n    storyline: \"King Regis, who oversees the land of Lucis, commands his army of soldiers to protect the kingdom from the Niflheim empire's plans to steal the sacred crystal.\",\n    rating: 4.5,\n    imagePath: 'images/Kingsglaive_Final_Fantasy_XV.jpg',\n    bookmarked: true,\n    genre: 'action',\n  },\n  {\n    id: 2,\n    title: 'Final Fantasy',\n    subtitle: 'Spirits Within',\n    storyline: 'A scientist makes a last stand on Earth with the help of a ragtag team of soldiers against an invasion of alien phantoms.',\n    rating: 4.5,\n    imagePath: 'images/Final_Fantasy_Spirits_Within.jpg',\n    bookmarked: false,\n    genre: 'fantasy',\n  },\n  {\n    id: 3,\n    title: 'Ghost In The Shell',\n    subtitle: 'Ghost In The Shell',\n    storyline: 'A hacker known as the Puppet Master is hunted by a female cyborg cop and her partner. This film is a revised version of Ghost in the Shell (1995).',\n    rating: 5,\n    imagePath: 'images/Ghost_In_The_Shell_2_0.jpg',\n    bookmarked: false,\n    genre: 'comedy',\n  },\n  {\n    id: 4,\n    title: 'Appleseed Alpha',\n    subtitle: 'Appleseed Alpha',\n    storyline: \"A young female soldier Deunan and her cyborg partner Briareos survive through the post World War 3 apocalyptic New York in search of human's future hope, the legendary city of Olympus.\",\n    rating: 3.8,\n    imagePath: 'images/Appleseed_Alpha.jpg',\n    bookmarked: true,\n    genre: 'action',\n  },\n  {\n    id: 5,\n    title: 'Resident Evil',\n    subtitle: 'Vendetta',\n    storyline: 'Chris Redfield enlists the help of Leon S. Kennedy and Rebecca Chambers to stop a death merchant, with a vengeance, from spreading a deadly virus in New York.',\n    rating: 4.2,\n    imagePath: 'images/Resident_Evil_Vendetta.jpg',\n    bookmarked: true,\n    genre: 'fantasy',\n  },\n];\n\nexport default movies;\n","import data from './movieData';\n\nlocalStorage.setItem('movies', JSON.stringify(data));\n\nconst readMovies = () => JSON.parse(localStorage.getItem('movies'));\nconst saveMovies = (movies) => localStorage.setItem('movies', JSON.stringify(movies));\n\nconst TIMEOUT = 2000;\nconst SUCCESS_STATUS = 'OK';\n\n// --------------------------------------------------------------------\n// A função simulateRequest simula uma requisição para uma API externa\n// Esse tipo de função que \"chama outra função\" é chamada de\n// \"currying function\" https://javascript.info/currying-partials\n// não se preocupe, estudaremos isso mais futuramente\n// --------------------------------------------------------------------\n\nconst simulateRequest = (response) => (callback) => {\n  setTimeout(() => {\n    callback(response);\n  }, TIMEOUT);\n};\n\nexport const getMovies = () => (\n  new Promise((resolve) => {\n    const movies = readMovies();\n    simulateRequest(movies)(resolve);\n  })\n);\n\nexport const getMovie = (movieId) => {\n  const movie = readMovies().find((mov) => mov.id === parseInt(movieId, 10));\n  return new Promise((resolve) => {\n    simulateRequest(movie)(resolve);\n  });\n};\n\nexport const updateMovie = (updatedMovie) => (\n  new Promise((resolve) => {\n    const movies = readMovies().map((movie) => {\n      if (movie.id === parseInt(updatedMovie.id, 10)) {\n        return { ...movie, ...updatedMovie };\n      }\n      return movie;\n    });\n    saveMovies(movies);\n    simulateRequest(SUCCESS_STATUS)(resolve);\n  })\n);\n\nexport const createMovie = (movieData) => (\n  new Promise((resolve) => {\n    let movies = readMovies();\n    const nextId = movies[movies.length - 1].id + 1;\n    const newMovie = { ...movieData, id: nextId };\n    movies = [...movies, newMovie];\n    saveMovies(movies);\n    simulateRequest(SUCCESS_STATUS)(resolve);\n  })\n);\n\nexport const deleteMovie = (movieId) => {\n  let movies = readMovies();\n  movies = movies.filter((movie) => movie.id !== parseInt(movieId, 10));\n  saveMovies(movies);\n\n  return new Promise((resolve) => {\n    simulateRequest({ status: SUCCESS_STATUS })(resolve);\n  });\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Redirect } from 'react-router-dom';\nimport { MovieForm, Loading } from '../components';\nimport * as movieAPI from '../services/movieAPI';\n\nclass EditMovie extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      movie: null,\n      status: 'loading',\n      shouldRedirect: false,\n    };\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.updatedState = this.updateState.bind(this);\n  }\n\n  componentDidMount() {\n    const { match: { params: { id } } } = this.props;\n    const getGetMovie = async () => {\n      const movie = await movieAPI.getMovie(id);\n      this.updateState(movie, 'Manda Ver');\n    };\n    getGetMovie();\n  }\n\n  handleSubmit(updatedMovie) {\n    const { shouldRedirect } = this.state;\n    this.setState({\n      movie: updatedMovie,\n      shouldRedirect: !shouldRedirect,\n    });\n    movieAPI.updateMovie(updatedMovie);\n  }\n\n  updateState(movie, status) {\n    this.setState({\n      movie,\n      status,\n    });\n  }\n\n  render() {\n    const { status, shouldRedirect, movie } = this.state;\n    if (shouldRedirect) {\n      // Redirect\n      return <Redirect to=\"/\" />;\n    }\n\n    if (status === 'loading') {\n      // render Loading\n      return <Loading />;\n    }\n\n    return (\n      <div data-testid=\"edit-movie\">\n        <MovieForm movie={ movie } onSubmit={ this.handleSubmit } />\n      </div>\n    );\n  }\n}\n\nEditMovie.propTypes = {\n  match: PropTypes.shape(\n    {\n      isExact: PropTypes.bool.isRequired,\n      params: PropTypes.shape(\n        {\n          id: PropTypes.string.isRequired,\n        },\n      ).isRequired,\n    },\n  ).isRequired,\n};\n\nexport default EditMovie;\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport * as movieAPI from '../services/movieAPI';\nimport { Loading } from '../components';\n\nclass MovieDetails extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isLoading: true,\n      movie: null,\n    };\n    this.movieDel = this.movieDel.bind(this);\n  }\n\n  componentDidMount() {\n    const { match: { params: { id } } } = this.props;\n    movieAPI.getMovie(id)\n      .then((movie) => this.movieMount(movie));\n  }\n\n  movieMount(movie) {\n    const { isLoading } = this.state;\n    this.setState({\n      movie,\n      isLoading: !isLoading,\n    });\n  }\n\n  movieDel() {\n    const { match: { params: { id } } } = this.props;\n    movieAPI.deleteMovie(id);\n  }\n\n  render() {\n    // Change the condition to check the state\n\n    const { isLoading } = this.state;\n\n    if (isLoading) return <Loading />;\n\n    const { movie:\n      { id, title, storyline, imagePath, genre, rating, subtitle } } = this.state;\n    return (\n      <div data-testid=\"movie-details\">\n        <h1>{`Title: ${title}`}</h1>\n        <img alt=\"Movie Cover\" src={ `../${imagePath}` } />\n        <p>{ `Subtitle: ${subtitle}` }</p>\n        <p>{ `Storyline: ${storyline}` }</p>\n        <p>{ `Genre: ${genre}` }</p>\n        <p>{ `Rating: ${rating}` }</p>\n        {/* https://stackoverflow.com/questions/26923042/how-do-you-validate-the-proptypes-of-a-nested-object-in-reactjs */}\n        <button type=\"button\">\n          <Link to=\"../\">\n            VOLTAR\n          </Link>\n        </button>\n        <button type=\"button\">\n          <Link to={ `${id}/edit` }>\n            EDITAR\n          </Link>\n        </button>\n        <button type=\"button\" onClick={ this.movieDel }>\n          <Link to=\"../\">\n            DELETAR\n          </Link>\n        </button>\n      </div>\n    );\n  }\n}\n\nMovieDetails.propTypes = {\n  match: PropTypes.shape(\n    {\n      isExact: PropTypes.bool.isRequired,\n      params: PropTypes.shape(\n        { id: PropTypes.string.isRequired },\n      ).isRequired,\n    },\n  ).isRequired,\n\n  history: PropTypes.shape({\n    action: PropTypes.string.isRequired,\n    goBack: PropTypes.func.isRequired,\n  }).isRequired,\n};\n\nexport default MovieDetails;\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Loading, MovieCard } from '../components';\nimport * as movieAPI from '../services/movieAPI';\n\nclass MovieList extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isLoading: true,\n      movies: [],\n    };\n  }\n\n  componentDidMount() {\n    movieAPI.getMovies().then((movie) => (\n      this.moviesMount(movie)\n    ));\n  }\n\n  onMount() {\n    this.setState((prevState) => ({ isLoading: !prevState.isLoading }));\n  }\n\n  moviesMount(arr) {\n    this.setState(() => ({\n      movies: [...arr],\n    }));\n    this.onMount();\n  }\n\n  render() {\n    const { isLoading, movies } = this.state;\n\n    // Render Loading here if the request is still happening\n    if (isLoading) return <div data-testid=\"movie-list\"><Loading /></div>;\n    return (\n      <div data-testid=\"movie-list\">\n        {movies.map(\n          (movie) => <MovieCard movie={ movie } key={ movie.title } />,\n        )}\n        <Link to=\"/movies/new\">ADICIONAR CARTÃO</Link>\n      </div>\n    );\n  }\n}\n\nexport default MovieList;\n","import React, { Component } from 'react';\nimport { Redirect } from 'react-router-dom';\n\nimport MovieForm from '../components/MovieForm';\nimport * as movieAPI from '../services/movieAPI';\n\nclass NewMovie extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      shouldRedirect: false,\n    };\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleSubmit(newMovie) {\n    const { shouldRedirect } = this.state;\n    console.log(newMovie, movieAPI);\n    movieAPI.createMovie(newMovie);\n    this.setState({\n      shouldRedirect: !shouldRedirect,\n    });\n  }\n\n  render() {\n    const { shouldRedirect } = this.state;\n    if (shouldRedirect) return <Redirect to=\"/\" />;\n    return (\n      <div data-testid=\"new-movie\">\n        <MovieForm onSubmit={ this.handleSubmit } />\n      </div>\n    );\n  }\n}\nexport default NewMovie;\n","import React, { Component } from 'react';\n\nclass NotFound extends Component {\n  render() {\n    return <div data-testid=\"404-error\">Página não encontrada</div>;\n  }\n}\n\nexport default NotFound;\n","import React from 'react';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport { MovieList, MovieDetails, NewMovie, EditMovie, NotFound } from './pages';\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <Switch>\n        <Route exact path=\"/\">\n          <MovieList />\n        </Route>\n\n        <Route exact path=\"/movies/new\">\n          <NewMovie />\n        </Route>\n\n        <Route\n          exact\n          path=\"/movies/:id\"\n          render={ (props) => (\n            <MovieDetails { ...props } />\n          ) }\n        />\n\n        <Route\n          exact\n          path=\"/movies/:id/edit\"\n          render={\n            (props) => (\n              <EditMovie { ...props } />)\n          }\n        />\n\n        <Route path=\"*\">\n          <NotFound />\n        </Route>\n      </Switch>\n\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}