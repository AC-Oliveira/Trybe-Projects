{"version":3,"sources":["components/Header.jsx","components/SearchBar.jsx","components/Rating.jsx","components/MovieCard.jsx","components/MovieList.jsx","components/InputTextFormat.jsx","components/InputTextAreaFormat.jsx","components/SelectFormat.jsx","components/AddMovie.jsx","components/MovieLibrary.jsx","data.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","React","Component","SearchBar","this","props","searchText","onSearchTextChange","bookmarkedOnly","onBookmarkedChange","selectedGenre","onSelectedGenreChange","data-testid","htmlFor","type","onChange","id","value","name","checked","Rating","rating","defaultProps","MovieCard","movie","title","subtitle","storyline","imagePath","alt","src","MovieList","movies","map","key","InFormat","n","t","ty","h","s","newName","min","max","InputAreaTextFormat","text","handle","state","cols","rows","SelectFormat","AddMovie","genre","bind","stateReset","arrayHandle","target","setState","obj","arr","console","log","onClick","action","MovieLibrary","array","handleChange","handleClick","event","object","filter","includes","bookmarked","push","propTypes","PropTypes","arrayOf","isRequired","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4b1057c3.chunk.js","sourcesContent":["import React from 'react';\n\nclass Header extends React.Component {\n  render() {\n    return (\n      <header className=\"movie-card-header\">\n        <h1 className=\"page-title\">Movie Cards Library</h1>\n      </header>\n    );\n  }\n}\n\nexport default Header;\n","// implement SearchBar component here\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nclass SearchBar extends React.Component {\n  render() {\n    const { searchText, onSearchTextChange, bookmarkedOnly,\n      onBookmarkedChange, selectedGenre,\n      onSelectedGenreChange } = this.props;\n\n    return (\n      <form data-testid=\"search-bar-form\">\n        <label data-testid=\"text-input-label\" htmlFor=\"input-text\">\n          Inclui o texto:\n          <input\n            type=\"text\"\n            onChange={ onSearchTextChange }\n            id=\"input-text\"\n            data-testid=\"text-input\"\n            value={ searchText }\n            name=\"searchText\"\n          />\n        </label>\n        <label\n          htmlFor=\"favoritos-checkbox\"\n          data-testid=\"checkbox-input-label\"\n        >\n          Mostrar somente favoritos\n          <input\n            type=\"checkbox\"\n            id=\"favoritos-checkbox\"\n            checked={ bookmarkedOnly }\n            onChange={ onBookmarkedChange }\n            data-testid=\"checkbox-input\"\n            name=\"bookmarkedOnly\"\n          />\n        </label>\n        <label htmlFor=\"genre-select\" data-testid=\"select-input-label\">\n          Filtrar por gênero:\n          <select\n            data-testid=\"select-input\"\n            name=\"selectedGenre\"\n            id=\"genre-select\"\n            value={ selectedGenre }\n            onChange={ onSelectedGenreChange }\n          >\n            <option data-testid=\"select-option\" value=\"\">Todos</option>\n            <option data-testid=\"select-option\" value=\"action\">Ação</option>\n            <option data-testid=\"select-option\" value=\"comedy\">Comédia</option>\n            <option data-testid=\"select-option\" value=\"thriller\">Suspense</option>\n          </select>\n        </label>\n      </form>\n    );\n  }\n}\n\nSearchBar.propTypes = {\n  searchText: PropTypes.string.isRequired,\n  onSearchTextChange: PropTypes.func.isRequired,\n  bookmarkedOnly: PropTypes.bool.isRequired,\n  onBookmarkedChange: PropTypes.func.isRequired,\n  selectedGenre: PropTypes.string.isRequired,\n  onSelectedGenreChange: PropTypes.func.isRequired,\n};\n\nexport default SearchBar;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass Rating extends React.Component {\n  render() {\n    const { rating } = this.props;\n    return (\n      <div className=\"movie-card-rating\" data-testid=\"rating\">\n        <span className=\"rating\">{rating}</span>\n      </div>\n    );\n  }\n}\n\nRating.propTypes = { rating: PropTypes.number };\n\nRating.defaultProps = {\n  rating: 'undefined',\n};\n\nexport default Rating;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Rating from './Rating';\n\nclass MovieCard extends React.Component {\n  render() {\n    const { movie } = this.props;\n    const { title, subtitle, storyline, rating, imagePath } = movie;\n    return (\n      <div className=\"movie-card\" data-testid=\"movie-card\">\n        <img alt=\"Movie Cover\" className=\"movie-card-image\" src={ imagePath } />\n        <div className=\"movie-card-body\">\n          <h4 data-testid=\"movie-card-title\" className=\"movie-card-title\">{title}</h4>\n          <h5 className=\"movie-card-subtitle\">{subtitle}</h5>\n          <p className=\"movie-card-storyline\">{storyline}</p>\n        </div>\n        <Rating rating={ rating } />\n      </div>\n    );\n  }\n}\n\nMovieCard.propTypes = {\n  movie: PropTypes.shape({\n    title: PropTypes.string,\n    subtitle: PropTypes.string,\n    storyline: PropTypes.string,\n    rating: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    imagePath: PropTypes.string,\n  }).isRequired,\n};\n\nexport default MovieCard;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport MovieCard from './MovieCard';\n\nclass MovieList extends React.Component {\n  render() {\n    const { movies } = this.props;\n    return (\n      <div>\n\n        <div data-testid=\"movie-list\" className=\"movie-list\">\n          { movies.map((movie) => <MovieCard key={ movie.title } movie={ movie } />) }\n        </div>\n      </div>\n    );\n  }\n}\n\nMovieList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.string.isRequired,\n      subtitle: PropTypes.string.isRequired,\n      storyline: PropTypes.string.isRequired,\n      rating: PropTypes.number,\n      imagePath: PropTypes.string.isRequired,\n    }),\n  ).isRequired,\n};\n\nexport default MovieList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction InFormat(props) {\n  const { n, t, ty, h, s } = props;\n  const newName = n === 'imagePath' ? 'image' : n;\n  return (\n    <label htmlFor={ `${newName}-input` } data-testid={ `${newName}-input-label` }>\n      {`${t}`}\n      <input\n        name={ `${n}` }\n        data-testid={ `${newName}-input` }\n        type={ `${ty}` }\n        id={ `${n}-input` }\n        value={ s }\n        onChange={ h }\n        min=\"0\"\n        max=\"5\"\n      />\n    </label>\n  );\n}\n\nInFormat.propTypes = {\n  n: PropTypes.string.isRequired,\n  t: PropTypes.string.isRequired,\n  ty: PropTypes.string.isRequired,\n  h: PropTypes.func.isRequired,\n  // Fonte: https://stackoverflow.com/questions/41808428/react-proptypes-allow-different-types-of-proptypes-for-one-prop\n  s: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.number,\n  ]).isRequired,\n};\n\nexport default InFormat;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction InputAreaTextFormat(props) {\n  const { name, text, handle, state } = props;\n  const newName = name === 'imagePath' ? 'image' : name;\n  return (\n    <label htmlFor={ `${newName}-input` } data-testid={ `${newName}-input-label` }>\n      {`${text}`}\n      <textarea\n        name={ `${name}` }\n        cols=\"30\"\n        rows=\"10\"\n        data-testid={ `${newName}-input` }\n        id={ `${name}-input` }\n        value={ state }\n        onChange={ handle }\n      />\n    </label>\n  );\n}\n\nInputAreaTextFormat.propTypes = {\n  name: PropTypes.string.isRequired,\n  text: PropTypes.string.isRequired,\n  handle: PropTypes.func.isRequired,\n  state: PropTypes.string.isRequired,\n};\n\nexport default InputAreaTextFormat;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction SelectFormat(props) {\n  const { name, text, handle, state } = props;\n  const newName = name === 'imagePath' ? 'image' : name;\n  return (\n    <label htmlFor={ `${newName}-input` } data-testid={ `${newName}-input-label` }>\n      {`${text}`}\n      <select\n        name={ `${name}` }\n        data-testid={ `${newName}-input` }\n        id=\"select-input\"\n        value={ state }\n        onChange={ handle }\n      >\n        <option value=\"action\" data-testid=\"genre-option\">Ação</option>\n        <option value=\"comedy\" data-testid=\"genre-option\">Comédia</option>\n        <option value=\"thriller\" data-testid=\"genre-option\">Suspense</option>\n      </select>\n    </label>\n  );\n}\n\nSelectFormat.propTypes = {\n  name: PropTypes.string.isRequired,\n  text: PropTypes.string.isRequired,\n  handle: PropTypes.func.isRequired,\n  state: PropTypes.string.isRequired,\n};\n\nexport default SelectFormat;\n","// implement AddMovie component here\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport InFormat from './InputTextFormat';\nimport InputAreaTextFormat from './InputTextAreaFormat';\nimport SelectFormat from './SelectFormat';\n\nclass AddMovie extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      subtitle: '',\n      title: '',\n      imagePath: '',\n      storyline: '',\n      rating: 0,\n      genre: '',\n    };\n    this.handle = this.handle.bind(this);\n    this.stateReset = this.stateReset.bind(this);\n    this.arrayHandle = this.arrayHandle.bind(this);\n  }\n\n  handle({ target }) {\n    const { name, value } = target;\n    this.setState({\n      [name]: value,\n    });\n    this.obj = this.state;\n  }\n\n  stateReset() {\n    this.setState({\n      subtitle: '',\n      title: '',\n      imagePath: '',\n      storyline: '',\n      rating: 0,\n      genre: '',\n    });\n  }\n\n  arrayHandle(arr) {\n    console.log(arr, this.state);\n    arr = this.state;\n    console.log(arr);\n  }\n\n  render() {\n    const { title, subtitle, imagePath, storyline, rating, genre } = this.state;\n    const { onClick } = this.props;\n\n    return (\n      <form action=\"\" data-testid=\"add-movie-form\">\n        <InFormat n=\"title\" t=\"Título\" ty=\"text\" h={ this.handle } s={ title } />\n        <InFormat n=\"subtitle\" t=\"Subtítulo\" ty=\"text\" h={ this.handle } s={ subtitle } />\n        <InFormat n=\"imagePath\" t=\"Imagem\" ty=\"text\" h={ this.handle } s={ imagePath } />\n        <InputAreaTextFormat\n          name=\"storyline\"\n          text=\"Sinopse\"\n          handle={ this.handle }\n          state={ storyline }\n        />\n        <InFormat n=\"rating\" t=\"Avaliação\" ty=\"number\" h={ this.handle } s={ rating } />\n        <SelectFormat\n          name=\"genre\"\n          text=\"Gênero\"\n          handle={ this.handle }\n          state={ genre }\n        />\n        <button\n          type=\"button\"\n          data-testid=\"send-button\"\n          onClick={ () => {\n            onClick(this.state);\n            this.stateReset();\n          } }\n        >\n          Adicionar filme\n        </button>\n      </form>\n    );\n  }\n}\n\nAddMovie.propTypes = {\n  onClick: PropTypes.func.isRequired,\n\n};\n\nexport default AddMovie;\n","// implement MovieLibrary component here\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport SearchBar from './SearchBar';\nimport MovieList from './MovieList';\nimport AddMovie from './AddMovie';\n\nexport default class MovieLibrary extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      searchText: '',\n      bookmarkedOnly: false,\n      selectedGenre: '',\n      array: 'string',\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleChange(event) {\n    const { target } = event;\n    const { name } = target;\n    const value = target.type === 'checkbox' ? target.checked : target.value;\n    this.setState({\n      [name]: value,\n    });\n  }\n\n  handleClick(object) {\n    this.setState({ array: object });\n  }\n\n  render() {\n    const { searchText, bookmarkedOnly, selectedGenre, array } = this.state;\n    let { movies } = this.props;\n    movies = movies\n      .filter((movie) => movie.title.includes(searchText)\n    || movie.subtitle.includes(searchText)\n    || movie.storyline.includes(searchText));\n    if (bookmarkedOnly) {\n      movies = movies\n        .filter((movie) => movie.bookmarked);\n    }\n    if (selectedGenre !== '') {\n      movies = movies\n        .filter((movie) => movie.genre === selectedGenre);\n    }\n    if (array !== 'string') {\n      movies.push(array);\n    }\n\n    return (\n      <div>\n        <SearchBar\n          searchText={ searchText }\n          onSearchTextChange={ this.handleChange }\n          bookmarkedOnly={ bookmarkedOnly }\n          onBookmarkedChange={ this.handleChange }\n          selectedGenre={ selectedGenre }\n          onSelectedGenreChange={ this.handleChange }\n        />\n        <MovieList\n          movies={ movies }\n          searchText={ searchText }\n          bookmarkedOnly={ bookmarkedOnly }\n          selectedGenre={ selectedGenre }\n        />\n        <AddMovie\n          onClick={ this.handleClick }\n          array={ array }\n        />\n      </div>\n    );\n  }\n}\n\nMovieList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.object,\n  ).isRequired,\n};\n\nMovieLibrary.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.object,\n  ).isRequired,\n};\n","const movies = [\n  {\n    title: 'Kingsglaive',\n    subtitle: 'Final Fantasy XV',\n    storyline: \"King Regis, who oversees the land of Lucis, commands his army of soldiers to protect the kingdom from the Niflheim empire's plans to steal the sacred crystal.\",\n    rating: 4.5,\n    imagePath: 'images/Kingsglaive_Final_Fantasy_XV.jpg',\n    bookmarked: true,\n    genre: 'action',\n  },\n  {\n    title: 'Final Fantasy',\n    subtitle: 'Spirits Within',\n    storyline: 'A scientist makes a last stand on Earth with the help of a ragtag team of soldiers against an invasion of alien phantoms.',\n    rating: 4.5,\n    imagePath: 'images/Final_Fantasy_Spirits_Within.jpg',\n    bookmarked: false,\n    genre: 'fantasy',\n  },\n  {\n    title: 'Ghost In The Shell',\n    subtitle: 'Ghost In The Shell',\n    storyline: 'A hacker known as the Puppet Master is hunted by a female cyborg cop and her partner. This film is a revised version of Ghost in the Shell (1995).',\n    rating: 5,\n    imagePath: 'images/Ghost_In_The_Shell_2_0.jpg',\n    bookmarked: false,\n    genre: 'comedy',\n  },\n  {\n    title: 'Appleseed Alpha',\n    subtitle: 'Appleseed Alpha',\n    storyline: \"A young female soldier Deunan and her cyborg partner Briareos survive through the post World War 3 apocalyptic New York in search of human's future hope, the legendary city of Olympus.\",\n    rating: 3.8,\n    imagePath: 'images/Appleseed_Alpha.jpg',\n    bookmarked: true,\n    genre: 'action',\n  },\n  {\n    title: 'Resident Evil',\n    subtitle: 'Vendetta',\n    storyline: 'Chris Redfield enlists the help of Leon S. Kennedy and Rebecca Chambers to stop a death merchant, with a vengeance, from spreading a deadly virus in New York.',\n    rating: 4.2,\n    imagePath: 'images/Resident_Evil_Vendetta.jpg',\n    bookmarked: true,\n    genre: 'fantasy',\n  },\n];\n\nexport default movies;\n","import React from 'react';\nimport Header from './components/Header';\nimport './App.css';\nimport MovieLibrary from './components/MovieLibrary';\nimport movies from './data';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <MovieLibrary movies={ movies } />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}