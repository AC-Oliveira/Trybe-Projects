{"version":3,"sources":["actions/index.js","pages/Login.js","pages/Utils/ItemList.js","pages/Utils/Form.js","pages/Wallet.js","App.js","serviceWorker.js","reducers/user.js","reducers/wallet.js","reducers/index.js","store/index.js","index.js"],"names":["LOGIN","economyAPI","setCurrency","payload","type","updateExpense","setLogin","Login","props","state","inputEmail","inputPassword","handleChange","bind","handleClick","target","this","setState","name","value","history","setUserLogin","push","validInput","validEmail","match","validPassword","length","placeholder","data-testid","onChange","onClick","disabled","React","Component","connect","dispatch","ItemList","editExpense","removeListItem","id","editListItem","number","stringNumber","toString","stringNumberIndex","indexOf","slice","item","description","method","currency","tag","exchangeRates","passaTeste","split","Number","ask","toFixed","index","Form","createExpen","formToFill","tagLabel","labellabel","expenseEdit","text","handle","htmlFor","map","selected","key","met","attCurrencyThunk","currencies","editor","expensesList","FormInputText","currencie","expenses","wallet","idToEdit","expense","a","fetch","response","json","obj","editedExpense","Wallet","reduce","curr","acc","user","Object","keys","splice","email","expensesCalc","currenciesJson","App","exact","path","component","Boolean","window","location","hostname","DEFAULT_USER_STATE","globalEmail","action","previous","DEFAULT_WALLET_STATE","walletData","console","log","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.69e689da.chunk.js","sourcesContent":["// Coloque aqui suas actions\nexport const LOGIN = 'LOGIN_ACTION';\nexport const WALLET_CURRENCY = 'WALLET_CURRENCY';\nexport const DELETE_EXPENSE = 'DELETE_EXPENSE';\nexport const EDIT_EXPENSE = 'EDIT_EXPENSE';\nexport const ADD_EXPENSE_ATT_CURR = 'ADD_EXPENSE_ATT_CURR';\nexport const UPDATE_EXPENSE = 'UPDATE_EXPENSE';\n\nconst economyAPI = 'https://economia.awesomeapi.com.br/json/all';\n\nconst setLogin = (payload) => ({ type: LOGIN, payload });\n\nexport const setCurrency = (payload) => ({ type: WALLET_CURRENCY, payload });\n\nexport const listExpenses = (payload) => ({ type: ADD_EXPENSE_ATT_CURR, payload });\n\nexport const deleteExpense = (payload) => ({ type: DELETE_EXPENSE, payload });\n\nexport const editExpense = (payload) => ({ type: EDIT_EXPENSE, payload });\n\nexport const getSecondThunk = (expense) => async (dispatch) => {\n  const response = await fetch(economyAPI);\n  const exchangeRates = await response.json();\n  const obj = { ...expense, exchangeRates };\n  dispatch(listExpenses(obj));\n};\n\nexport const updateExpense = (payload) => ({\n  type: UPDATE_EXPENSE,\n  payload,\n});\n\nexport const getThirdThunk = (expense) => async (dispatch) => {\n  const response = await fetch(economyAPI);\n  const exchangeRates = await response.json();\n  const obj = { ...expense, exchangeRates };\n  dispatch(updateExpense(obj));\n};\nexport const getCurrencyThunk = () => async (dispatch) => {\n  const response = await fetch(economyAPI);\n  const currenciesJson = await response.json();\n  const payload = Object.keys(currenciesJson);\n  payload.splice(1, 1);\n  dispatch(setCurrency(payload));\n};\n\nexport default setLogin;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport setLogin from '../actions/index';\n\nclass Login extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      inputEmail: '',\n      inputPassword: '',\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleChange({ target }) {\n    this.setState({\n      [target.name]: target.value,\n    });\n  }\n\n  handleClick() {\n    const { inputEmail } = this.state;\n    const { history, setUserLogin } = this.props;\n    setUserLogin(inputEmail);\n    history.push('/carteira');\n  }\n\n  render() {\n    const PASSWORD_LENGTH = 5;\n    const { inputPassword, inputEmail } = this.state;\n    let validInput = false;\n    // ref: https://regexlib.com/Search.aspx?k=&c=1&m=-1&ps=20\n    const validEmail = inputEmail.match(/^\\w+@[a-zA-Z_]+?\\.[a-zA-Z]{2,3}$/);\n    const validPassword = inputPassword.length > PASSWORD_LENGTH;\n    if (validEmail && validPassword) validInput = !validInput;\n    return (\n      <>\n        <h1>Login</h1>\n        <input\n          type=\"text\"\n          name=\"inputEmail\"\n          value={ inputEmail }\n          placeholder=\"Email\"\n          data-testid=\"email-input\"\n          onChange={ this.handleChange }\n        />\n        <input\n          type=\"text\"\n          name=\"inputPassword\"\n          value={ inputPassword }\n          placeholder=\"Password\"\n          data-testid=\"password-input\"\n          onChange={ this.handleChange }\n        />\n        {validInput ? <button type=\"button\" onClick={ this.handleClick }>Entrar</button>\n          : <button type=\"button\" disabled>Entrar</button>}\n      </>\n    );\n  }\n}\n\nLogin.propTypes = {\n  history: PropTypes.shape({\n    push: PropTypes.func.isRequired,\n  }).isRequired,\n  setUserLogin: PropTypes.func.isRequired,\n};\n\n// const mapStateToProps = (state) => ({ state });\nconst mapDispatchToProps = (dispatch) => ({\n  setUserLogin: (value) => dispatch(setLogin(value)),\n});\n\nexport default connect(null, mapDispatchToProps)(Login);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { deleteExpense, editExpense } from '../../actions/index';\n\nclass ItemList extends Component {\n  constructor(props) {\n    super(props);\n    this.handleClick = this.handleClick.bind(this);\n    this.editExpense = this.editExpense.bind(this);\n  }\n\n  handleClick() {\n    const { removeListItem, id } = this.props;\n    removeListItem(id);\n  }\n\n  editExpense() {\n    const { editListItem, id } = this.props;\n    editListItem(id);\n  }\n\n  editNumbers(number) {\n    const stringNumber = number.toString();\n    const stringNumberIndex = stringNumber.indexOf('.');\n    const NUMBER = 3;\n    const numberEdited = stringNumber.slice(0, stringNumberIndex + NUMBER);\n    return numberEdited;\n  }\n\n  render() {\n    const { item:\n      { value, description, method, currency,\n        tag, exchangeRates } } = this.props;\n    // const currencyIndex = exchangeRates[currency].name.indexOf('/');\n    // const editedCurrency = exchangeRates[currency].name.slice(0, currencyIndex);\n    const passaTeste = exchangeRates[currency].name.split('/')[0];\n    return (\n      <tr>\n        <td>{description}</td>\n        <td>{tag}</td>\n        <td>{method}</td>\n        <td>{value}</td>\n        <td>{passaTeste}</td>\n        <td>{Number(exchangeRates[currency].ask).toFixed(2)}</td>\n        <td>{(exchangeRates[currency].ask * value).toFixed(2)}</td>\n        <td>Real</td>\n        <button\n          type=\"button\"\n          data-testid=\"edit-btn\"\n          onClick={ this.editExpense }\n        >\n          Editar\n        </button>\n        <button\n          type=\"button\"\n          onClick={ this.handleClick }\n          data-testid=\"delete-btn\"\n        >\n          Remover\n        </button>\n      </tr>\n    );\n  }\n}\n\nItemList.propTypes = {\n  editListItem: PropTypes.func.isRequired,\n  id: PropTypes.number.isRequired,\n  item: PropTypes.string.isRequired,\n  removeListItem: PropTypes.func.isRequired,\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  removeListItem: (id) => (dispatch(deleteExpense(id))),\n  editListItem: (index) => (dispatch(editExpense(index))),\n});\n\nexport default connect(null, mapDispatchToProps)(ItemList);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { getSecondThunk, updateExpense } from '../../actions/index';\nimport ItemList from './ItemList';\n\nclass Form extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      id: 0,\n      value: '',\n      description: '',\n      currency: 'USD',\n      method: 'Dinheiro',\n      tag: 'Alimentação',\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.createExpen = this.createExpen.bind(this);\n    this.formToFill = this.formToFill.bind(this);\n    this.tagLabel = this.tagLabel.bind(this);\n    this.labellabel = this.labellabel.bind(this);\n    this.expenseEdit = this.expenseEdit.bind(this);\n  }\n\n  FormInputText(value, text, name, handle) {\n    return (\n      <label htmlFor={ name }>\n        {text}\n        <input\n          type=\"text\"\n          name={ name }\n          value={ value }\n          id={ name }\n          onChange={ handle }\n        />\n      </label>\n    );\n  }\n\n  tagLabel(tag) {\n    const tags = ['Alimentação', 'Lazer', 'Trabalho', 'Saúde', 'Transporte'];\n    return (\n      <label htmlFor=\"tag\">\n        Tag\n        <select name=\"tag\" id=\"tag\" onChange={ this.handleChange }>\n          {tags.map((type) => {\n            if (type === tag) return <option value={ type } selected>{type}</option>;\n            return <option key={ type } value={ type }>{type}</option>;\n          })}\n        </select>\n      </label>\n    );\n  }\n\n  labellabel(method) {\n    const methods = ['Dinheiro', 'Cartão de crédito', 'Cartão de débito'];\n    return (\n      <label htmlFor=\"method\">\n        Método de Pagamento\n        <select name=\"method\" id=\"method\" onChange={ this.handleChange }>\n          {methods.map((met) => {\n            if (met === method) return <option value={ met } selected>{met}</option>;\n            return <option key={ met } value={ met }>{met}</option>;\n          })}\n        </select>\n      </label>);\n  }\n\n  handleChange({ target }) {\n    this.setState({\n      [target.name]: target.value,\n    });\n  }\n\n  createExpen() {\n    const { id } = this.state;\n    this.setState({\n      id: id + 1,\n    });\n    const { attCurrencyThunk } = this.props;\n    attCurrencyThunk({ ...this.state });\n  }\n\n  formToFill() {\n    const { currencies, expensesList: { editor } } = this.props;\n    const { value, description } = this.state;\n    return (\n      <form>\n        {this.FormInputText(value, 'Valor', 'value', this.handleChange)}\n        {this.FormInputText(description, 'Descrição', 'description', this\n          .handleChange)}\n        <label htmlFor=\"currency\">\n          Moeda\n          <select\n            name=\"currency\"\n            id=\"currency\"\n            onChange={ this.handleChange }\n          >\n            {currencies.map((currencie) => (\n              <option\n                value={ currencie }\n                key={ currencie }\n              >\n                {currencie}\n              </option>\n            ))}\n          </select>\n        </label>\n        {this.tagLabel()}\n        {this.labellabel()}\n        { !editor\n          ? <button type=\"button\" onClick={ this.createExpen }>Adicionar despesas</button>\n          : <button type=\"button\" onClick={ this.expenseEdit }>Editar despesa</button>}\n      </form>\n    );\n  }\n\n  expenseEdit() {\n    const { editExpense, id, expenses } = this.props;\n    const { exchangeRates } = expenses[id];\n    editExpense({ ...this.state, id, exchangeRates });\n  }\n\n  render() {\n    const { expensesList } = this.props;\n    return (\n      <>\n        {this.formToFill()}\n        <table>\n          <tr>\n            <th>Descrição</th>\n            <th>Tag</th>\n            <th>Método de pagamento</th>\n            <th>Valor</th>\n            <th>Moeda</th>\n            <th>Câmbio utilizado</th>\n            <th>Valor convertido</th>\n            <th>Moeda de conversão</th>\n            <th>Editar/Excluir</th>\n          </tr>\n          {expensesList.expenses.length === 0 ? null : expensesList.expenses\n            .map((item,\n              index) => <ItemList item={ item } key={ index } id={ index } />)}\n        </table>\n      </>\n    );\n  }\n}\n\nForm.propTypes = {\n  attCurrencyThunk: PropTypes.func.isRequired,\n  currencies: PropTypes.shape({\n    map: PropTypes.func.isRequired,\n  }).isRequired, // exchangeRates: PropTypes.string.isRequired,\n  editExpense: PropTypes.func.isRequired,\n  expenses: PropTypes.shape({\n    map: PropTypes.func.isRequired,\n  }).isRequired,\n  expensesList: PropTypes.func.isRequired,\n  id: PropTypes.number.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  expensesList: state.wallet,\n  id: state.wallet.idToEdit,\n  expenses: state.wallet.expenses,\n});\nconst mapDispatchToProps = (dispatch) => ({\n  attCurrencyThunk: (value) => dispatch(getSecondThunk(value)),\n  editExpense: (editedExpense) => dispatch(updateExpense(editedExpense)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Form);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { getCurrencyThunk } from '../actions';\nimport Form from './Utils/Form';\n\nclass Wallet extends React.Component {\n  componentDidMount() {\n    const { setCurrency } = this.props;\n    setCurrency();\n  }\n\n  expensesCalc() {\n    const { state: { wallet: { expenses } } } = this.props;\n    const expensesList = expenses\n      .map((expense) => {\n        const currentCurrencyExpensePrice = (expense.exchangeRates[expense.currency].ask);\n        const currentCurrencyQuotation = expense.value;\n        const expensePrice = (currentCurrencyExpensePrice * currentCurrencyQuotation)\n          .toFixed(2);\n        return expensePrice;\n      });\n    const totalExpenseInBRL = expensesList.reduce((curr, acc) => {\n      acc = Number(acc);\n      curr += acc;\n      return Number(curr.toFixed(2));\n    }, 0);\n    return totalExpenseInBRL;\n  }\n\n  render() {\n    const { state: { user, wallet: { currencies, expenses } } } = this.props;\n    const currenciesArray = Object.keys(currencies);\n    currenciesArray.splice(1, 1);\n    return (\n      <>\n        <p data-testid=\"email-field\">{user.email}</p>\n        <p>\n          Gastos: R$\n          <span data-testid=\"total-field\">\n            {expenses.length === 0 ? 0\n              : this.expensesCalc()}\n          </span>\n        </p>\n        <p>\n          Câmbio:\n          <span data-testid=\"header-currency-field\">BRL</span>\n        </p>\n        <Form currencies={ currencies } />\n      </>\n    );\n  }\n}\n\nWallet.propTypes = {\n  setCurrency: PropTypes.func.isRequired,\n  state: PropTypes.arrayOf().isRequired,\n};\n\nconst mapStateToProps = (state) => ({ state });\nconst mapDispatchToProps = (dispatch) => ({\n  setCurrency: () => dispatch(getCurrencyThunk()),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Wallet);\n","import React, { Component } from 'react';\nimport { Route } from 'react-router-dom';\nimport Login from './pages/Login';\nimport Wallet from './pages/Wallet';\n\nclass App extends Component {\n  render() {\n    return (\n      <>\n        <Route exact path=\"/\" component={ Login } />\n        <Route exact path=\"/carteira\" component={ Wallet } />\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","// Esse reducer será responsável por tratar as informações da pessoa usuária\nimport { LOGIN } from '../actions/index';\n\nexport const DEFAULT_USER_STATE = { email: '' };\n\nfunction globalEmail(state = DEFAULT_USER_STATE, action) {\n  switch (action.type) {\n  case LOGIN:\n    return { ...state, email: action.payload };\n\n  default:\n    return state;\n  }\n}\n\nexport default globalEmail;\n","// Esse reducer será responsável por tratar o todas as informações relacionadas as despesas\nimport {\n  WALLET_CURRENCY, DELETE_EXPENSE, EDIT_EXPENSE, ADD_EXPENSE_ATT_CURR,\n  UPDATE_EXPENSE } from '../actions';\n\n// Sugestão dada do Ygor Lage.\nlet previous = '';\n\nexport const DEFAULT_WALLET_STATE = { editor: false,\n  idToEdit: null,\n  currencies: [],\n  expenses: [] };\n\nfunction walletData(state = DEFAULT_WALLET_STATE, action) {\n  switch (action.type) {\n  case WALLET_CURRENCY:\n    return { ...state, currencies: action.payload };\n\n  case ADD_EXPENSE_ATT_CURR:\n    return { ...state,\n      expenses: [...state.expenses, action.payload] };\n\n  case DELETE_EXPENSE:\n    // Ref: https://forum.freecodecamp.org/t/freecodecamp-challenge-guide-remove-an-item-from-an-array/301447 Link Passado pelo camarada Rod\n    return { ...state,\n      expenses: [...state.expenses.slice(0, action.payload),\n        ...state.expenses.slice(action.payload + 1, state.expenses.length)] };\n  case EDIT_EXPENSE:\n    return { ...state, idToEdit: action.payload, editor: true };\n\n  case UPDATE_EXPENSE:\n    previous = { ...state };\n    // eslint-disable-next-line no-case-declarations\n    console.log(state);\n    console.log(action);\n    previous.expenses[action.payload.id] = { ...action.payload };\n    previous.editor = false;\n    previous.idToEdit = null;\n    return { ...previous };\n\n  default:\n    return state;\n  }\n}\n\nexport default walletData;\n","import { combineReducers } from 'redux';\nimport user from './user';\nimport wallet from './wallet';\n\n// Configure os seus reducers.\n// ATENÇÃO: você obrigatoriamente tem que utilizar as chaves \"user\" e \"wallet\" no seu estado global\n\n// const reducer = combineReducers(amarelo, wallet);\n\n// export default reducer;\n\nconst rootReducer = combineReducers({ user, wallet });\nexport default rootReducer;\n","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport rootReducer from '../reducers';\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './store/index';\n\nReactDOM.render(\n  <Provider store={ store }>\n    <HashRouter>\n      <App />\n    </HashRouter>\n  </Provider>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}